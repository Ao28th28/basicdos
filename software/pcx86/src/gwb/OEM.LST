Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-1
                                                            

                                 
                                ; 
                                ; Reversed-engineered OEM.ASM, courtesy of Mich
				al Necasek 2020-07-13 
                                ; 
 0000                           DSEG    SEGMENT PUBLIC 'DATASG' 
                                 
                                ; Defined elsewhere 
                                EXTRN   CSAVEA:WORD,CSAVEM:WORD 
                                 
                                ; Data defined by the OEM module 
                                 
 0000  00                       var_630 db      0       ; Saved video mode 
 0001  0725 R                   var_631 dw      offset  CTLBRK 
 0003  0000                     var_633 dw      0 
 0005  0703 R                           dw      offset  TIMISR 
 0007  0000                     var_637 dw      0 
 0009  00                       var_639 db      0       ; Currently selected vi
				deo page 
 000A  00                       var_63a db      0 
 000B  50                       var_63b db      80      ; Screen width in colum
				ns (40/80) 
 000C  00                       var_63c db      0 
 000D  00                       var_63d db      0       ; Currently visible vid
				eo page 
 000E  00                       var_63e db      0       ; Initial/saved number 
				of columns 
 000F  00                       var_63f db      0       ; Currently set video m
				ode 
 0010  00                       var_640 db      0 
 0011  00                       var_641 db      0 
 0012  00                       var_642 db      0 
 0013  0707                     var_643 dw      0707h   ; Cursor shape 
 0015  07                       var_645 db      7       ; Saved text attributes
				 
 0016  07                       var_646 db      7       ; Current text attribut
				es 
 0017  0000                     var_647 dw      0       ; Current video memory 
				offset 
 0019  0000                     var_649 dw      0       ; Screen width in pixel
				s? 
 001B  00                       var_64b db      0       ; Current character col
				umn? 
 001C  00                       var_64c db      0 
 001D  00                       var_64d db      0 
 001E  0000                     var_64e dw      0 
 0020  00                       var_650 db      0 
 0021  00                               db      0 
 0022  06                       var_652 db      6 
 0023  05                               db      5 
 0024  01                               db      1 
 0025  06                       var_655 db      6 
 0026  0A                               db      10 
 0027  01                               db      1 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-2
                                                            

 0028  00                               db      0       ; Likely unused 
 0029  00                               db      0 
 002A  00                               db      0 
 002B  00                               db      0 
 002C  00                               db      0 
 002D  00                               db      0 
 002E  00                               db      0 
 002F  00                               db      0 
 0030  03                       var_660 db      3 
 0031  0000                     var_661 dw      0       ; Current offset into s
				creen? 
 0033  0000                     var_663 dw      0       ; Some other offset? 
 0035  00                       var_665 db      0 
 0036  00                       var_666 db      0 
 0037  0000                     var_667 dw      0       ; Function pointer 
 0039  00                       var_669 db      0 
                                 
 003A                           DSEG    ENDS 
                                 
 0000                           CSEG	SEGMENT PUBLIC 'CODESG' 
                                	ASSUME  CS:CSEG 
                                 
                                ; GW-BASIC routines that OEM code calls into. 
                                 
                                EXTRN   KYBCLR:NEAR 
                                EXTRN   SCNCLR:NEAR 
                                EXTRN   SCNSWI:NEAR 
                                EXTRN   GRPINI:NEAR 
                                 
                                EXTRN   SPCTAB:NEAR 
                                EXTRN   SNERR:NEAR 
                                 
                                PUBLIC  SEGINI, GETHED, PRTMAP, GETFBC, SETFBC,
				 GRPSIZ, POKFLT, PEKFLT 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0000                           SEGINI		proc near 
 0000  1E                       		push	ds 
 0001  33 C0                    		xor	ax, ax 
 0003  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0005  8C C8                    		mov	ax, cs 
 0007  A3 006E                  		mov	ds:6Eh,	ax	; Adjust segment for vector 1B
				h 
 000A  A3 0072                  		mov	ds:72h,	ax	; Adjust segment for vector 1C
				h 
 000D  A3 0092                  		mov	ds:92h,	ax	; Adjust segment for vector 24
				h 
 0010  8C C0                    		mov	ax, es 
 0012  A3 0510                  		mov	ds:510h, ax	; Stash	away BASIC data	segme
				nt 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-3
                                                            

 0015  1F                       		pop	ds 
                                		assume ds:nothing 
 0016  C3                       		ret 
                                SEGINI		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 0017  0D 0A                    OEMHED		db 0Dh,0Ah 
 0019  53 2F 32 20 4D 75 73     		db 'S/2 Museum BASIC',0Dh,0Ah 
       65 75 6D 20 42 41 53     
       49 43 0D 0A              
 002B  56 65 72 73 69 6F 6E     		db 'Version 1.0',0Dh,0Ah 
       20 31 2E 30 0D 0A        
 0038  0D 0A                    		db 0Dh,0Ah 
 003A  28 43 29 20 43 6F 70     		db '(C) Copyright OS/2 Museum 2020' 
       79 72 69 67 68 74 20     
       4F 53 2F 32 20 4D 75     
       73 65 75 6D 20 32 30     
       32 30                    
 0058  00                                       db 0 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0059                           GETHED		proc near 
 0059  3A C0                    		cmp	al, al 
 005B  BB 0017 R                		mov	bx, offset OEMHED 
 005E  C3                       		ret 
                                GETHED		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Map print function/output character codes 
                                 
 005F                           PRTMAP		proc near 
 005F  3C FF                    		cmp	al, 0FFh 
 0061  75 09                    		jnz	short loc_5044 
 0063  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0068  74 18                    		jz	short BADMAP 
 006A  B0 20                    		mov	al, ' ' 
 006C                           loc_5044: 
 006C  3C 07                    		cmp	al, 7		; BEL 
 006E  74 12                    		jz	short BADMAP 
 0070  3C 20                    		cmp	al, ' ' 
 0072  73 22                    		jnb	short loc_506E 
 0074  3C 09                    		cmp	al, 9 
 0076  72 1E                    		jb	short loc_506E 
 0078  74 21                    		jz	short loc_5073 
 007A  3C 0E                    		cmp	al, 0Eh 
 007C  72 04                    		jb	short BADMAP 
 007E  3C 1C                    		cmp	al, 1Ch 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-4
                                                            

 0080  72 14                    		jb	short loc_506E 
 0082                           BADMAP: 
 0082  B4 FF                    		mov	ah, 0FFh 
 0084  0A C0                    		or	al, al 
 0086  F9                       		stc 
 0087  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0088                           loc_5060: 
 0088  B0 20                    		mov	al, ' ' 
 008A  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 008F  75 05                    		jnz	short loc_506E 
 0091  0A C0                    		or	al, al 
 0093  B0 00                    		mov	al, 0 
 0095  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0096                           loc_506E: 
 0096  0A C0                    		or	al, al 
 0098  74 EE                    		jz	short loc_5060 
 009A  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 009B                           loc_5073: 
 009B  B0 0F                    		mov	al, 0Fh 
 009D  EB E3                    		jmp	short BADMAP 
                                PRTMAP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Get foreground/background colors 
                                ; On entry: 
                                ;   CF set  : Graphics 
                                ;   CF clear: Text mode 
                                 
 009F                           GETFBC		proc near 
 009F  72 15                    		jb	short TXTATR 
 00A1  A0 0016 R                		mov	al, ds:var_646 
 00A4  8A D8                    		mov	bl, al 
 00A6  D0 EB                    		shr	bl, 1 
 00A8  D0 EB                    		shr	bl, 1 
 00AA  D0 EB                    		shr	bl, 1 
 00AC  D0 EB                    		shr	bl, 1 
 00AE  25 008F                  		and	ax, 8Fh 
 00B1  81 E3 0007               		and	bx, 7 
 00B5  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-5
                                                            

 00B6                           TXTATR:					; CODE XREF: GETFBCj 
 00B6  33 C0                    		xor	ax, ax 
 00B8  8B D8                    		mov	bx, ax 
 00BA  B0 03                    		mov	al, 3 
 00BC  C3                       		ret 
                                GETFBC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 00BD  00                       byte_5095	db 0			; DATA XREF: SETFBC+13r SETFB
				C+19w ... 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set foreground/background colors 
                                 
 00BE                           SETFBC		proc near 
 00BE  50                       		push	ax 
 00BF  53                       		push	bx 
 00C0  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 00C5  75 2F                    		jnz	short loc_50CE 
 00C7  D0 E3                    		shl	bl, 1 
 00C9  D0 E3                    		shl	bl, 1 
 00CB  D0 E3                    		shl	bl, 1 
 00CD  D0 E3                    		shl	bl, 1 
 00CF  0A C3                    		or	al, bl 
 00D1  2E: 80 3E 00BD R 00      		cmp	cs:byte_5095, 0 
 00D7  2E: C6 06 00BD R 00      		mov	cs:byte_5095, 0 
 00DD  A0 0015 R                		mov	al, ds:var_645 
 00E0  75 11                    		jnz	short loc_50CB 
 00E2  2E: C6 06 00BD R 01      		mov	cs:byte_5095, 1 
 00E8  B0 70                    		mov	al, 70h	; 'p' 
 00EA  80 3E 0015 R 07          		cmp	byte ptr ds:var_645, 7 
 00EF  74 02                    		jz	short loc_50CB 
 00F1  B0 07                    		mov	al, 7 
 00F3                           loc_50CB: 
 00F3  A2 0016 R                		mov	ds:var_646, al 
 00F6                           loc_50CE: 
 00F6  5B                       		pop	bx 
 00F7  58                       		pop	ax 
 00F8  C3                       		ret 
                                SETFBC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 00F9  8A 0E 000B R             		mov	cl, ds:var_63b 
 00FD  B5 00                    		mov	ch, 0 
 00FF  BA 0019                  		mov	dx, 25 
 0102  C3                       		ret 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-6
                                                            

                                ; Get screen pixel dimensions 
                                 
 0103                           GRPSIZ		proc near 
 0103  8B 0E 0019 R             		mov	cx, ds:var_649 
 0107  0B C9                    		or	cx, cx 
 0109  74 01                    		jz	short HEIGHT 
 010B  49                       		dec	cx		; Decrement unless zero 
 010C                           HEIGHT: 
 010C  BA 00C7                  		mov	dx, 199 
 010F  C3                       		ret 
                                GRPSIZ		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 0110  00                       PEKPOK		db 0                    ; Is it	a PEEK 
				(0) or POKE (255)? 
 0111  002E                     word_50E9	dw 2Eh 
 0113  002F                     		dw 2Fh 
 0115  0347                     		dw 347h 
 0117  0348                     		dw 348h 
 0119  0030                     		dw 30h 
 011B  0031                     		dw 31h 
 011D  0358                     		dw 358h 
 011F  0359                     		dw 359h 
 0121  004E                     		dw 4Eh 
 0123  002C                     		dw 2Ch 
 0125  002D                     		dw 2Dh 
 0127  006A                     		dw 6Ah 
 0129  01BA R                   off_5101	dw offset loc_5192 
 012B  0153                     		dw 153h 
 012D  0152                     		dw 152h 
 012F  0646                     		dw 646h         ; var_646 ??? 
 0131  048F                     		dw 48Fh 
 0133  048E                     		dw 48Eh 
 0135  0157                     		dw 157h 
 0137  0156                     		dw 156h 
 0139  047E                     		dw 47Eh 
 013B  047D                     		dw 47Dh 
 013D  0155                     		dw 155h 
 013F  0154                     		dw 154h 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Filter PEEKs for "special" addresses 
                                 
 0141                           PEKFLT		proc near 
 0141  50                       		push	ax 
 0142  51                       		push	cx 
 0143  53                       		push	bx 
 0144  52                       		push	dx 
 0145  8B D3                    		mov	dx, bx 
 0147  2E: C6 06 0110 R 00      		mov	cs:PEKPOK, 0	; It's a peek 
 014D  EB 0A                    		jmp	short DOPFLT 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-7
                                                            

                                PEKFLT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Filter POKEs for "special" addresses 
                                ; On entry: Address in ES:DX 
                                ; On exit : ZF clear if	poke should be done 
                                 
 014F                           POKFLT		proc near 
 014F  50                       		push	ax 
 0150  51                       		push	cx 
 0151  53                       		push	bx 
 0152  52                       		push	dx 
 0153  2E: C6 06 0110 R FF      		mov	cs:PEKPOK, -1	; It's a poke 
                                 
 0159                           DOPFLT:					; CODE XREF: PEKFLT+Cj 
 0159  57                       		push	di 
 015A  06                       		push	es 
 015B  FC                       		cld 
 015C  8C D8                    		mov	ax, ds 
 015E  8C C1                    		mov	cx, es 
 0160  3B C8                    		cmp	cx, ax		; Is it	the BASIC data segment? 
 0162  74 18                    		jz	short BASDAT 
 0164  83 F9 00                 		cmp	cx, 0		; Zero segment? 
 0167  75 55                    		jnz	short PFLTX 
 0169  81 FA 041A               		cmp	dx, 41Ah	; Is it	the pointer into the key
				board buffer? 
 016D  75 4F                    		jnz	short PFLTX 
 016F  2E: 80 3E 0110 R FF      		cmp	cs:PEKPOK, -1	; Is it	a POKE? 
 0175  75 47                    		jnz	short PFLTX 
 0177  E8 0000 E                		call	KYBCLR 
 017A  EB 42                    		jmp	short PFLTX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 017C                           BASDAT:					; CODE XREF: POKFLT+13j 
 017C  BF 0111 R                		mov	di, offset word_50E9 
 017F  8B C2                    		mov	ax, dx 
 0181  B9 0018                  		mov	cx, 18h 
 0184  D1 E9                    		shr	cx, 1 
 0186  0E                       		push	cs 
 0187  07                       		pop	es 
                                		assume es:CSEG 
 0188  F2/ AF                   		repne scasw 
 018A  75 32                    		jnz	short PFLTX 
 018C  D1 E1                    		shl	cx, 1 
 018E  BB 0129 R                		mov	bx, offset off_5101 
 0191  03 D9                    		add	bx, cx 
 0193  2E: 8B 07                		mov	ax, cs:[bx] 
 0196  07                       		pop	es 
                                		assume es:nothing 
 0197  5F                       		pop	di 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-8
                                                            

 0198  5A                       		pop	dx 
 0199  5B                       		pop	bx 
 019A  83 F9 02                 		cmp	cx, 2 
 019D  72 18                    		jb	short loc_518F 
 019F  2E: 80 3E 0110 R 00      		cmp	cs:PEKPOK, 0	; Is it	a PEEK? 
 01A5  74 08                    		jz	short loc_5187 
 01A7  8B D0                    		mov	dx, ax 
 01A9  0D FFFF                  		or	ax, 0FFFFh 
 01AC  59                       		pop	cx 
 01AD  58                       		pop	ax 
 01AE  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01AF                           loc_5187:				; CODE XREF: POKFLT+56j 
 01AF  8B D8                    		mov	bx, ax 
 01B1  0D FFFF                  		or	ax, 0FFFFh 
 01B4  59                       		pop	cx 
 01B5  58                       		pop	ax 
 01B6  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01B7                           loc_518F:				; CODE XREF: POKFLT+4Ej 
 01B7  59                       		pop	cx 
 01B8  FF E0                    		jmp	ax 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01BA                           loc_5192: 
 01BA  33 C0                    		xor	ax, ax 
 01BC  58                       		pop	ax 
 01BD  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01BE                           PFLTX:					; CODE XREF: POKFLT+18j POKFLT+1Ej
				 ... 
 01BE  07                       		pop	es 
 01BF  5F                       		pop	di 
 01C0  5A                       		pop	dx 
 01C1  5B                       		pop	bx 
 01C2  59                       		pop	cx 
 01C3  58                       		pop	ax 
 01C4  C3                       		ret 
                                POKFLT		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 4 
                                 
                                PUBLIC  SETCBF, INICOM, RECCOM, SNDCOM, STACOM,
				 TRMCOM, SNDLPT 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-9
                                                            

                                 
 01C5  2580                     BAUDTB  	dw 9600 
 01C7  12C0                     		dw 4800 
 01C9  0960                     		dw 2400 
 01CB  0708                     		dw 1800 
 01CD  04B0                     		dw 1200 
 01CF  0258                     		dw 600 
 01D1  012C                     		dw 300 
 01D3  0096                     		dw 150 
 01D5  006E                     		dw 110 
 01D7  004B                     		dw 75 
 01D9  000C                     		dw 12 
 01DB  0018                     		dw 24 
 01DD  0030                     		dw 48 
 01DF  0040                     		dw 64 
 01E1  0060                     		dw 96 
 01E3  00C0                     		dw 192 
 01E5  0180                     		dw 384 
 01E7  0300                     		dw 768 
 01E9  0417                     		dw 1047 
 01EB  0600                     		dw 1536 
 01ED  08                       masks?		db 8 
 01EE  18                       		db 18h 
 01EF  28                       		db 28h 
 01F0  38                       		db 38h 
 01F1  01F5 R                   COMTBL		dw offset CM1CTL 
 01F3  0217 R                   		dw offset CM2CTL 
 01F5  00                       CM1CTL		db    0		; Control structure for	first 
				COM port 
 01F6  00                       		db    0 
 01F7  00                       		db    0 
 01F8  00                       		db    0 
 01F9  00                       		db    0 
 01FA  00                       		db    0 
 01FB  00                       		db    0 
 01FC  00                       		db    0 
 01FD  00                       		db    0 
 01FE  00                       		db    0 
 01FF  00                       		db    0 
 0200  00                       		db    0 
 0201  00                       		db    0 
 0202  00                       		db    0 
 0203  00                       		db    0 
 0204  00                       		db    0 
 0205  00                       		db    0 
 0206  00                       		db    0 
 0207  00                       		db    0 
 0208  00                       		db    0 
 0209  00                       		db    0 
 020A  00                       		db    0 
 020B  00                       		db    0 
 020C  00                       		db    0 
 020D  00                       		db    0 
 020E  00                       		db    0 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-10
                                                            

 020F  00                       		db    0 
 0210  00                       		db    0 
 0211  00                       		db    0 
 0212  00                       		db    0 
 0213  00                       		db    0 
 0214  00                       		db    0 
 0215  0245 R                   		dw offset CM1ISR 
 0217  00                       CM2CTL		db    0         ; Control structure for
					second COM port 
 0218  00                       		db    0 
 0219  00                       		db    0 
 021A  00                       		db    0 
 021B  00                       		db    0 
 021C  00                       		db    0 
 021D  00                       		db    0 
 021E  00                       		db    0 
 021F  00                       		db    0 
 0220  00                       		db    0 
 0221  00                       		db    0 
 0222  00                       		db    0 
 0223  00                       		db    0 
 0224  00                       		db    0 
 0225  00                       		db    0 
 0226  00                       		db    0 
 0227  00                       		db    0 
 0228  00                       		db    0 
 0229  00                       		db    0 
 022A  00                       		db    0 
 022B  00                       		db    0 
 022C  00                       		db    0 
 022D  00                       		db    0 
 022E  00                       		db    0 
 022F  00                       		db    0 
 0230  00                       		db    0 
 0231  00                       		db    0 
 0232  00                       		db    0 
 0233  00                       		db    0 
 0234  00                       		db    0 
 0235  00                       		db    0 
 0236  00                       		db    0 
 0237  024B R                   		dw offset CM2ISR 
 0239  0000                     CBFSEG		dw 0			; DATA XREF: CM2ISR+49r SETCBF+
				4w ... 
 023B  0000                     CBFSIZ		dw 0			; DATA XREF: CM2ISR+29r SETCBF:
				CKCOM1w ... 
 023D  0328 R                   ISRDSP		dw offset ISRFN0	; DATA XREF: CM2ISR+1E
				r 
 023F  02EF R                   		dw offset ISRFN1 
 0241  026D R                   		dw offset ISRFN2 
 0243  031C R                   		dw offset ISRFN3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0245                           CM1ISR: 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-11
                                                            

 0245  53                       		push	bx 
 0246  BB 01F5 R                		mov	bx, offset CM1CTL 
 0249  EB 04                    		jmp	short COMISR 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 024B                           CM2ISR		proc far 
 024B  53                       		push	bx 
 024C  BB 0217 R                		mov	bx, offset CM2CTL 
                                 
 024F                           COMISR: 
 024F  51                       		push	cx 
 0250  52                       		push	dx 
 0251  56                       		push	si 
 0252  57                       		push	di 
 0253  1E                       		push	ds 
 0254  0E                       		push	cs 
 0255  1F                       		pop	ds 
                                		assume ds:CSEG 
 0256  50                       		push	ax 
 0257  C6 47 1D 00              		mov	byte ptr [bx+1Dh], 0 
 025B  8B 17                    		mov	dx, [bx] 
 025D  42                       		inc	dx 
 025E  42                       		inc	dx 
 025F  EC                       		in	al, dx 
                                 
 0260                           loc_523B: 
 0260  24 06                    		and	al, 6 
 0262  FE 47 1D                 		inc	byte ptr [bx+1Dh] 
 0265  B4 00                    		mov	ah, 0 
 0267  8B F0                    		mov	si, ax 
 0269  FF A4 023D R             		jmp	ISRDSP[si] 
                                 
 026D                           ISRFN2: 
 026D  4A                       		dec	dx 
 026E  4A                       		dec	dx 
 026F  EC                       		in	al, dx 
 0270  8B 77 0A                 		mov	si, [bx+0Ah] 
 0273  46                       		inc	si 
 0274  3B 36 023B R             		cmp	si, CBFSIZ 
 0278  76 02                    		jbe	short loc_5257 
 027A  33 F6                    		xor	si, si 
                                 
 027C                           loc_5257:				; CODE XREF: CM2ISR+2Dj 
 027C  3B 77 08                 		cmp	si, [bx+8] 
 027F  75 06                    		jnz	short loc_5262 
 0281  80 4F 18 01              		or	byte ptr [bx+18h], 1 
 0285  EB 17                    		jmp	short loc_5279 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0287                           loc_5262:				; CODE XREF: CM2ISR+34j 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-12
                                                            

 0287  C6 06 1306 R 01          		mov	BYTE PTR ISREVT, 1 
 028C  89 77 0A                 		mov	[bx+0Ah], si 
 028F  1E                       		push	ds 
 0290  53                       		push	bx 
 0291  8B 5F 14                 		mov	bx, [bx+14h] 
 0294  8B 3E 0239 R             		mov	di, CBFSEG 
 0298  8E DF                    		mov	ds, di 
                                		assume ds:nothing 
 029A  88 00                    		mov	[bx+si], al 
 029C  5B                       		pop	bx 
 029D  1F                       		pop	ds 
                                 
 029E                           loc_5279:				; CODE XREF: CM2ISR+3Aj CM2ISR+CA
				j ... 
 029E  B0 20                    		mov	al, 20h		; Send EOI 
 02A0  E6 20                    		out	20h, al		; Interrupt controller,	8259A. 
 02A2  8B 17                    		mov	dx, [bx] 
 02A4  42                       		inc	dx 
 02A5  42                       		inc	dx 
 02A6  EC                       		in	al, dx 
 02A7  A8 01                    		test	al, 1 
 02A9  75 3B                    		jnz	short ISRX 
 02AB  80 7F 1D 08              		cmp	byte ptr [bx+1Dh], 8 
 02AF  72 AF                    		jb	short loc_523B 
 02B1  80 4F 19 01              		or	byte ptr [bx+19h], 1 
 02B5  1E                       		push	ds 
 02B6  33 C0                    		xor	ax, ax 
 02B8  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 02BA  2E: 8B 77 1E             		mov	si, cs:[bx+1Eh]	; Messing with the IVT! 
 02BE  2E: 8B 47 10             		mov	ax, cs:[bx+10h] 
 02C2  89 04                    		mov	[si], ax 
 02C4  2E: 8B 47 12             		mov	ax, cs:[bx+12h] 
 02C8  89 44 02                 		mov	[si+2],	ax 
 02CB  33 C0                    		xor	ax, ax 
 02CD  2E: 89 47 10             		mov	cs:[bx+10h], ax 
 02D1  2E: 89 47 12             		mov	cs:[bx+12h], ax 
 02D5  1F                       		pop	ds 
                                		assume ds:nothing 
 02D6  42                       		inc	dx 
 02D7  42                       		inc	dx 
 02D8  B0 00                    		mov	al, 0		; Read interrupt mask 
 02DA  EE                       		out	dx, al 
 02DB  E4 21                    		in	al, 21h		; Interrupt controller,	8259A. 
 02DD  0A 47 1C                 		or	al, [bx+1Ch]	; Mask this port's IRQ again 
 02E0  E6 21                    		out	21h, al		; Interrupt controller,	8259A. 
 02E2  B0 20                    		mov	al, 20h		; One more EOI for good	measure?
				 
 02E4  E6 20                    		out	20h, al		; Interrupt controller,	8259A. 
                                 
 02E6                           ISRX:					; CODE XREF: CM2ISR+5Ej 
 02E6  58                       		pop	ax 
 02E7  1F                       		pop	ds 
 02E8  5F                       		pop	di 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-13
                                                            

 02E9  5E                       		pop	si 
 02EA  5A                       		pop	dx 
 02EB  59                       		pop	cx 
 02EC  5B                       		pop	bx 
 02ED  FB                       		sti 
 02EE  CF                       		iret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 02EF                           ISRFN1: 
 02EF  4A                       		dec	dx 
 02F0  8B 77 0C                 		mov	si, [bx+0Ch] 
 02F3  3B 77 0E                 		cmp	si, [bx+0Eh] 
 02F6  74 1F                    		jz	short loc_52F2 
 02F8  46                       		inc	si 
 02F9  81 FE 0080               		cmp	si, 80h	; '�' 
 02FD  76 02                    		jbe	short loc_52DC 
 02FF  33 F6                    		xor	si, si 
                                 
 0301                           loc_52DC:				; CODE XREF: CM2ISR+B2j 
 0301  89 77 0C                 		mov	[bx+0Ch], si 
 0304  53                       		push	bx 
 0305  1E                       		push	ds 
 0306  8B 5F 16                 		mov	bx, [bx+16h] 
 0309  8B 3E 0239 R             		mov	di, ds:CBFSEG 
 030D  8E DF                    		mov	ds, di 
 030F  8A 00                    		mov	al, [bx+si] 
 0311  1F                       		pop	ds 
 0312  5B                       		pop	bx 
 0313  4A                       		dec	dx 
 0314  EE                       		out	dx, al 
 0315  EB 87                    		jmp	short loc_5279 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0317                           loc_52F2: 
 0317  B0 0D                    		mov	al, 0Dh 
 0319  EE                       		out	dx, al 
 031A  EB 82                    		jmp	short loc_5279 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 031C                           ISRFN3: 
 031C  83 C2 03                 		add	dx, 3 
 031F  EC                       		in	al, dx 
 0320  24 0A                    		and	al, 0Ah 
 0322  08 47 18                 		or	[bx+18h], al 
 0325  E9 029E R                		jmp	loc_5279 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0328                           ISRFN0: 
 0328  83 C2 04                 		add	dx, 4 
 032B  EC                       		in	al, dx 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-14
                                                            

 032C  83 EA 05                 		sub	dx, 5 
 032F  8A 4F 1A                 		mov	cl, [bx+1Ah] 
 0332  F6 D0                    		not	al 
 0334  22 C1                    		and	al, cl 
 0336  8A 67 19                 		mov	ah, [bx+19h] 
 0339  8A EC                    		mov	ch, ah 
 033B  80 E4 F0                 		and	ah, 0F0h 
 033E  3A E0                    		cmp	ah, al 
 0340  74 13                    		jz	short loc_5330 
 0342  80 E5 0F                 		and	ch, 0Fh 
 0345  0A C5                    		or	al, ch 
 0347  88 47 19                 		mov	[bx+19h], al 
 034A  22 C1                    		and	al, cl 
 034C  74 0A                    		jz	short loc_5333 
 034E  80 4F 19 02              		or	byte ptr [bx+19h], 2 
 0352  B0 0D                    		mov	al, 0Dh 
 0354  EE                       		out	dx, al 
                                 
 0355                           loc_5330:				; CODE XREF: CM2ISR+F5j 
 0355  E9 029E R                		jmp	loc_5279 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0358                           loc_5333:				; CODE XREF: CM2ISR+101j 
 0358  80 67 19 FD              		and	byte ptr [bx+19h], 0FDh 
 035C  B0 0F                    		mov	al, 0Fh 
 035E  EE                       		out	dx, al 
 035F  E9 029E R                		jmp	loc_5279 
                                CM2ISR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set OEM COM Buffer (size & location) 
                                ; On entry: CX = COM buffer segment 
                                ;	    DX = COM buffer size if ZF set 
                                ;	    ZF set   = use buffer size in DX 
                                ;	    ZF clear = use default buffer size 
                                ; 
                                ; On return: DX	= COM buffer size 
                                ;	     CF	set on error 
                                 
 0362                           SETCBF		proc near		; CODE XREF: MAPCLC+17p 
 0362  53                       		push	bx 
 0363  50                       		push	ax 
 0364  1E                       		push	ds 
 0365  56                       		push	si 
 0366  2E: 89 0E 0239 R         		mov	cs:CBFSEG, cx 
 036B  75 03                    		jnz	short HAVBSZ	; ZF set if COM	buffer size 
				was 
                                					; given	on the command line (/C:xxx) 
 036D  BA 0100                  		mov	dx, 256		; Default COM buffer size 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-15
                                                            

 0370                           HAVBSZ:					; CODE XREF: SETCBF+9j 
 0370  33 F6                    		xor	si, si 
 0372  0B D2                    		or	dx, dx 
 0374  74 69                    		jz	short SCBFX	; Bail if zero buffer size 
 0376  81 FA 7F70               		cmp	dx, 7F70h	; Buffer size too big? 
 037A  76 03                    		jbe	short CKCOM1 
 037C  BA 7F70                  		mov	dx, 7F70h	; Maximum COM buffer size 
                                 
 037F                           CKCOM1:					; CODE XREF: SETCBF+18j 
 037F  2E: 89 16 023B R         		mov	cs:CBFSIZ, dx 
 0384  42                       		inc	dx 
 0385  8E DE                    		mov	ds, si 
                                		assume ds:nothing 
 0387  BB 01F5 R                		mov	bx, offset CM1CTL 
 038A  A1 0400                  		mov	ax, ds:400h	; Read COM1 base from BDA 
 038D  3D 03F8                  		cmp	ax, 3F8h	; Does it match	the first UART? 
 0390  75 27                    		jnz	short CKCOM2 
 0392  2E: C7 47 1E 0030        		mov	word ptr cs:[bx+1Eh], 30h ; Address of IR
				Q4 vector 
 0398  2E: C6 47 1B EF          		mov	byte ptr cs:[bx+1Bh], 0EFh ; IRQ4 mask 
 039D  2E: C6 47 1C 10          		mov	byte ptr cs:[bx+1Ch], 10h ; IRQ4 bit 
 03A2  2E: 89 07                		mov	cs:[bx], ax 
 03A5  2E: 89 77 16             		mov	cs:[bx+16h], si 
 03A9  81 C6 0081               		add	si, 81h	; '�' 
 03AD  2E: 89 77 14             		mov	cs:[bx+14h], si 
 03B1  03 F2                    		add	si, dx 
 03B3  BB 0217 R                		mov	bx, offset CM2CTL 
 03B6  A1 0402                  		mov	ax, ds:402h	; Read COM2 base from BDA 
                                 
 03B9                           CKCOM2:					; CODE XREF: SETCBF+2Ej 
 03B9  3D 02F8                  		cmp	ax, 2F8h	; Is it	the second UART? 
 03BC  75 21                    		jnz	short SCBFX 
 03BE  2E: C7 47 1E 002C        		mov	word ptr cs:[bx+1Eh], 2Ch ; Address of IR
				Q3 vector 
 03C4  2E: C6 47 1B F7          		mov	byte ptr cs:[bx+1Bh], 0F7h ; IRQ3 mask 
 03C9  2E: C6 47 1C 08          		mov	byte ptr cs:[bx+1Ch], 8	; IRQ3 bit 
 03CE  2E: 89 07                		mov	cs:[bx], ax 
 03D1  2E: 89 77 16             		mov	cs:[bx+16h], si 
 03D5  81 C6 0081               		add	si, 81h	; '�' 
 03D9  2E: 89 77 14             		mov	cs:[bx+14h], si 
 03DD  03 F2                    		add	si, dx 
                                 
 03DF                           SCBFX:					; CODE XREF: SETCBF+12j SETCBF+5Aj
				 
 03DF  8B D6                    		mov	dx, si 
 03E1  83 C2 0F                 		add	dx, 0Fh		; Round	up to next para 
 03E4  81 E2 FFF0               		and	dx, 0FFF0h 
 03E8  5E                       		pop	si 
 03E9  1F                       		pop	ds 
                                		assume ds:nothing 
 03EA  58                       		pop	ax 
 03EB  5B                       		pop	bx 
 03EC  F8                       		clc 
 03ED  C3                       		ret 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-16
                                                            

                                SETCBF		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; START	OF FUNCTION CHUNK FOR INICOM 
                                 
 03EE                           BADFNM: 
 03EE  B4 FF                    		mov	ah, -1		; Bad file name 
 03F0  E9 0514 R                		jmp	INICMX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 03F3                           loc_53CE: 
 03F3  B4 FE                    		mov	ah, -2 
 03F5  E9 0514 R                		jmp	INICMX 
                                ; END OF FUNCTION CHUNK	FOR INICOM 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Machine dependent COM	OPEN routine 
                                 
 03F8                           INICOM		proc near 
                                 
 03F8  56                       		push	si 
 03F9  57                       		push	di 
 03FA  1E                       		push	ds 
 03FB  0E                       		push	cs 
 03FC  1F                       		pop	ds 
                                		assume ds:CSEG 
 03FD  8B F3                    		mov	si, bx 
 03FF  FC                       		cld 
 0400  26: AC                   		lods	byte ptr es:[si] 
 0402  8A E0                    		mov	ah, al 
 0404  E8 06E5 R                		call	CMPREP 
 0407  0B D2                    		or	dx, dx 
 0409  74 E8                    		jz	short loc_53CE 
 040B  26: AD                   		lods	word ptr es:[si] 
 040D  BF 01C5 R                		mov	di, offset BAUDTB 
 0410  B9 000A                  		mov	cx, 0Ah 
 0413  06                       		push	es 
 0414  0E                       		push	cs 
 0415  07                       		pop	es 
                                		assume es:CSEG 
 0416  F2/ AF                   		repne scasw 
 0418  07                       		pop	es 
                                		assume es:nothing 
 0419  75 D3                    		jnz	short BADFNM 
 041B  83 C7 12                 		add	di, 12h 
 041E  83 C2 03                 		add	dx, 3 
 0421  B0 80                    		mov	al, 80h	; '�' 
 0423  EE                       		out	dx, al 
 0424  83 EA 03                 		sub	dx, 3 
 0427  8B 05                    		mov	ax, [di] 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-17
                                                            

 0429  EE                       		out	dx, al 
 042A  42                       		inc	dx 
 042B  8A C4                    		mov	al, ah 
 042D  EE                       		out	dx, al 
 042E  83 C2 02                 		add	dx, 2 
 0431  26: AC                   		lods	byte ptr es:[si] 
 0433  2C 04                    		sub	al, 4 
 0435  8A E0                    		mov	ah, al 
 0437  72 B5                    		jb	short BADFNM 
 0439  74 02                    		jz	short loc_5418 
 043B  FE C8                    		dec	al 
                                 
 043D                           loc_5418: 
 043D  3C 03                    		cmp	al, 3 
 043F  77 AD                    		ja	short BADFNM 
 0441  8A C8                    		mov	cl, al 
 0443  26: AC                   		lods	byte ptr es:[si] 
 0445  75 08                    		jnz	short loc_542A 
 0447  3C 02                    		cmp	al, 2 
 0449  74 04                    		jz	short loc_542A 
 044B  0A C0                    		or	al, al 
 044D  75 9F                    		jnz	short BADFNM 
                                 
 044F                           loc_542A: 
 044F  0A E0                    		or	ah, al 
 0451  74 9B                    		jz	short BADFNM 
 0453  FE C8                    		dec	al 
 0455  78 0B                    		js	short loc_543D 
 0457  B4 00                    		mov	ah, 0 
 0459  53                       		push	bx 
 045A  BB 01ED R                		mov	bx, offset masks? 
 045D  03 D8                    		add	bx, ax 
 045F  0A 0F                    		or	cl, [bx] 
 0461  5B                       		pop	bx 
                                 
 0462                           loc_543D: 
 0462  26: AC                   		lods	byte ptr es:[si] 
 0464  0A C0                    		or	al, al 
 0466  74 03                    		jz	short loc_5446 
 0468  80 C9 04                 		or	cl, 4 
                                 
 046B                           loc_5446: 
 046B  8A C1                    		mov	al, cl 
 046D  EE                       		out	dx, al 
 046E  26: AD                   		lods	word ptr es:[si] 
 0470  B1 00                    		mov	cl, 0 
 0472  89 47 02                 		mov	[bx+2],	ax 
 0475  0B C0                    		or	ax, ax 
 0477  74 03                    		jz	short loc_5457 
 0479  80 C9 80                 		or	cl, 80h 
                                 
 047C                           loc_5457: 
 047C  26: AD                   		lods	word ptr es:[si] 
 047E  89 47 04                 		mov	[bx+4],	ax 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-18
                                                            

 0481  0B C0                    		or	ax, ax 
 0483  74 03                    		jz	short loc_5463 
 0485  80 C9 10                 		or	cl, 10h 
                                 
 0488                           loc_5463: 
 0488  26: AD                   		lods	word ptr es:[si] 
 048A  89 47 06                 		mov	[bx+6],	ax 
 048D  0B C0                    		or	ax, ax 
 048F  74 03                    		jz	short loc_546F 
 0491  80 C9 20                 		or	cl, 20h 
                                 
 0494                           loc_546F: 
 0494  26: AC                   		lods	byte ptr es:[si] 
 0496  A8 02                    		test	al, 2 
 0498  B0 03                    		mov	al, 3 
 049A  74 02                    		jz	short loc_5479 
 049C  B0 01                    		mov	al, 1 
                                 
 049E                           loc_5479: 
 049E  42                       		inc	dx 
 049F  EE                       		out	dx, al 
 04A0  32 C0                    		xor	al, al 
 04A2  88 4F 1A                 		mov	[bx+1Ah], cl 
 04A5  88 47 18                 		mov	[bx+18h], al 
 04A8  C7 47 08 0000            		mov	word ptr [bx+8], 0 
 04AD  C7 47 0A 0000            		mov	word ptr [bx+0Ah], 0 
 04B2  C7 47 0C 0000            		mov	word ptr [bx+0Ch], 0 
 04B7  C7 47 0E 0000            		mov	word ptr [bx+0Eh], 0 
 04BC  83 7F 10 00              		cmp	word ptr [bx+10h], 0 
 04C0  75 3F                    		jnz	short loc_54DC 
 04C2  83 EA 04                 		sub	dx, 4 
 04C5  1E                       		push	ds 
 04C6  33 C0                    		xor	ax, ax 
 04C8  8E D8                    		mov	ds, ax 
 04CA  2E: 8B 77 1E             		mov	si, cs:[bx+1Eh]	; IVT manipulation! 
 04CE  8B 04                    		mov	ax, [si] 
 04D0  2E: 89 47 10             		mov	cs:[bx+10h], ax 
 04D4  8B 44 02                 		mov	ax, [si+2] 
 04D7  2E: 89 47 12             		mov	cs:[bx+12h], ax 
 04DB  2E: 8B 47 20             		mov	ax, cs:[bx+20h] 
 04DF  89 04                    		mov	[si], ax 
 04E1  8C C8                    		mov	ax, cs 
 04E3  89 44 02                 		mov	[si+2],	ax 
 04E6  1F                       		pop	ds 
                                		assume ds:nothing 
 04E7  42                       		inc	dx 
 04E8  42                       		inc	dx 
 04E9  EC                       		in	al, dx 
 04EA  4A                       		dec	dx 
 04EB  4A                       		dec	dx 
 04EC  EC                       		in	al, dx 
 04ED  83 C2 05                 		add	dx, 5 
 04F0  EC                       		in	al, dx 
 04F1  83 EA 04                 		sub	dx, 4 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-19
                                                            

 04F4  B0 0D                    		mov	al, 0Dh 
 04F6  EE                       		out	dx, al 
 04F7  E4 21                    		in	al, 21h		; Interrupt controller,	8259A. 
 04F9  22 47 1B                 		and	al, [bx+1Bh]	; Unmask IRQ 
 04FC  E6 21                    		out	21h, al		; Interrupt controller,	8259A. 
 04FE  83 C2 03                 		add	dx, 3 
                                 
 0501                           loc_54DC: 
 0501  EC                       		in	al, dx 
 0502  0C 08                    		or	al, 8 
 0504  EE                       		out	dx, al 
 0505  42                       		inc	dx 
 0506  42                       		inc	dx 
 0507  FA                       		cli 
 0508  EC                       		in	al, dx 
 0509  F6 D0                    		not	al 
 050B  22 C1                    		and	al, cl 
 050D  88 47 19                 		mov	[bx+19h], al 
 0510  FB                       		sti 
 0511  E8 068A R                		call	sub_5665 
                                 
 0514                           INICMX: 
 0514  1F                       		pop	ds 
 0515  5F                       		pop	di 
 0516  5E                       		pop	si 
 0517  C3                       		ret 
                                INICOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Read Char from COM to	[AL] if	ready 
                                 
 0518                           RECCOM		proc near 
 0518  53                       		push	bx 
 0519  51                       		push	cx 
 051A  52                       		push	dx 
 051B  56                       		push	si 
 051C  57                       		push	di 
 051D  1E                       		push	ds 
 051E  0E                       		push	cs 
 051F  1F                       		pop	ds 
                                		assume ds:CSEG 
 0520  50                       		push	ax 
 0521  E8 06E5 R                		call	CMPREP 
 0524  B1 00                    		mov	cl, 0 
 0526  E8 0668 R                		call	sub_5643 
 0529  59                       		pop	cx 
 052A  8A C1                    		mov	al, cl 
 052C  75 23                    		jnz	short loc_552C 
 052E  FA                       		cli 
 052F  8B 77 08                 		mov	si, [bx+8] 
 0532  3B 77 0A                 		cmp	si, [bx+0Ah] 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-20
                                                            

 0535  74 1A                    		jz	short loc_552C 
 0537  46                       		inc	si 
 0538  3B 36 023B R             		cmp	si, CBFSIZ 
 053C  76 02                    		jbe	short loc_551B 
 053E  33 F6                    		xor	si, si 
                                 
 0540                           loc_551B: 
 0540  89 77 08                 		mov	[bx+8],	si 
 0543  8B 5F 14                 		mov	bx, [bx+14h] 
 0546  8B 3E 0239 R             		mov	di, CBFSEG 
 054A  8E DF                    		mov	ds, di 
                                		assume ds:nothing 
 054C  8A 00                    		mov	al, [bx+si] 
 054E  FB                       		sti 
 054F  0B D2                    		or	dx, dx 
                                 
 0551                           loc_552C: 
 0551  1F                       		pop	ds 
 0552  5F                       		pop	di 
 0553  5E                       		pop	si 
 0554  5A                       		pop	dx 
 0555  59                       		pop	cx 
 0556  5B                       		pop	bx 
 0557  C3                       		ret 
                                RECCOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Send [AL] to COM 
                                 
 0558                           SNDCOM		proc near 
 0558  53                       		push	bx 
 0559  51                       		push	cx 
 055A  52                       		push	dx 
 055B  56                       		push	si 
 055C  57                       		push	di 
 055D  1E                       		push	ds 
 055E  0E                       		push	cs 
 055F  1F                       		pop	ds 
                                		assume ds:CSEG 
 0560  50                       		push	ax 
 0561  E8 06E5 R                		call	CMPREP 
 0564  8A 4F 1A                 		mov	cl, [bx+1Ah] 
 0567  E8 0668 R                		call	sub_5643 
 056A  59                       		pop	cx 
 056B  75 3B                    		jnz	short SNDCMX 
                                 
 056D                           SNDLOP: 
 056D  FA                       		cli 
 056E  8B 77 0E                 		mov	si, [bx+0Eh] 
 0571  46                       		inc	si 
 0572  81 FE 0080               		cmp	si, 80h	; '�' 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-21
                                                            

 0576  76 02                    		jbe	short loc_5555 
 0578  33 F6                    		xor	si, si 
                                 
 057A                           loc_5555: 
 057A  3B 77 0C                 		cmp	si, [bx+0Ch] 
 057D  74 23                    		jz	short loc_557D 
 057F  1E                       		push	ds 
 0580  53                       		push	bx 
 0581  89 77 0E                 		mov	[bx+0Eh], si 
 0584  8B 5F 16                 		mov	bx, [bx+16h] 
 0587  8B 3E 0239 R             		mov	di, CBFSEG 
 058B  8E DF                    		mov	ds, di 
                                		assume ds:nothing 
 058D  88 08                    		mov	[bx+si], cl 
 058F  5B                       		pop	bx 
 0590  1F                       		pop	ds 
 0591  42                       		inc	dx 
 0592  EC                       		in	al, dx 
 0593  A8 02                    		test	al, 2 
 0595  75 11                    		jnz	short SNDCMX 
 0597  F6 47 19 02              		test	byte ptr [bx+19h], 2 
 059B  75 0B                    		jnz	short SNDCMX 
 059D  B0 0F                    		mov	al, 0Fh 
 059F  EE                       		out	dx, al 
 05A0  EB 06                    		jmp	short SNDCMX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 05A2                           loc_557D: 
 05A2  FB                       		sti 
 05A3  E8 06CF R                		call	COMDLY 
 05A6  74 C5                    		jz	short SNDLOP	; Next char unless Ctrl+Break
				 pressed 
 05A8                           SNDCMX: 
 05A8  FB                       		sti 
 05A9  1F                       		pop	ds 
 05AA  5F                       		pop	di 
 05AB  5E                       		pop	si 
 05AC  5A                       		pop	dx 
 05AD  59                       		pop	cx 
 05AE  5B                       		pop	bx 
 05AF  C3                       		ret 
                                SNDCOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Get COM bytes	in queue 
                                ;	 On entry: AH =	unit number 
                                ;	 On return: DX=bytes in	queue 
                                ;		    CX=free bytes in queue 
                                ;		    AH = non-zero if error 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-22
                                                            

 05B0                           STACOM		proc near 
 05B0  53                       		push	bx 
 05B1  56                       		push	si 
 05B2  57                       		push	di 
 05B3  1E                       		push	ds 
 05B4  0E                       		push	cs 
 05B5  1F                       		pop	ds 
                                		assume ds:CSEG 
 05B6  E8 06E5 R                		call	CMPREP 
 05B9  32 E4                    		xor	ah, ah 
 05BB  8B 57 0A                 		mov	dx, [bx+0Ah] 
 05BE  3B 57 08                 		cmp	dx, [bx+8] 
 05C1  73 05                    		jnb	short loc_55A3 
 05C3  03 16 023B R             		add	dx, CBFSIZ 
 05C7  42                       		inc	dx 
                                 
 05C8                           loc_55A3: 
 05C8  2B 57 08                 		sub	dx, [bx+8] 
 05CB  8B 0E 023B R             		mov	cx, CBFSIZ 
 05CF  2B CA                    		sub	cx, dx 
 05D1  81 FA 00FF               		cmp	dx, 0FFh 
 05D5  76 03                    		jbe	short loc_55B5 
 05D7  BA 00FF                  		mov	dx, 0FFh 
                                 
 05DA                           loc_55B5: 
 05DA  1F                       		pop	ds 
                                		assume ds:nothing 
 05DB  5F                       		pop	di 
 05DC  5E                       		pop	si 
 05DD  5B                       		pop	bx 
 05DE  C3                       		ret 
                                STACOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 05DF                           SNDLPT		proc near 
 05DF  51                       		push	cx 
 05E0  52                       		push	dx 
 05E1  33 D2                    		xor	dx, dx 
 05E3  86 D4                    		xchg	dl, ah 
 05E5  CD 17                    		int	17h 
 05E7  80 E4 01                 		and	ah, 1 
 05EA  74 18                    		jz	short loc_55DF 
 05EC  B4 02                    		mov	ah, 2 
 05EE  CD 17                    		int	17h		; PRINTER - GET	STATUS 
                                					; DX = printer port (0-3) 
                                					; Return: AH = status 
 05F0  80 FC 28                 		cmp	ah, 28h	; '(' 
 05F3  75 04                    		jnz	short loc_55D4 
 05F5  B4 03                    		mov	ah, 3 
 05F7  EB 0B                    		jmp	short loc_55DF 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-23
                                                            

                                ; ---------------------------------------------
				------------------------------ 
                                 
 05F9                           loc_55D4: 
 05F9  80 FC 08                 		cmp	ah, 8 
 05FC  75 04                    		jnz	short loc_55DD 
 05FE  B4 04                    		mov	ah, 4 
 0600  EB 02                    		jmp	short loc_55DF 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0602                           loc_55DD: 
 0602  B4 02                    		mov	ah, 2 
                                 
 0604                           loc_55DF: 
 0604  5A                       		pop	dx 
 0605  59                       		pop	cx 
 0606  C3                       		ret 
                                SNDLPT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Terminate COM	channel 
                                 
 0607                           TRMCOM		proc near 
 0607  53                       		push	bx 
 0608  51                       		push	cx 
 0609  52                       		push	dx 
 060A  56                       		push	si 
 060B  57                       		push	di 
 060C  1E                       		push	ds 
 060D  0E                       		push	cs 
 060E  1F                       		pop	ds 
                                		assume ds:CSEG 
 060F  E8 06E5 R                		call	CMPREP 
 0612  0B D2                    		or	dx, dx 
 0614  75 04                    		jnz	short loc_55F5 
 0616  B4 FF                    		mov	ah, 0FFh 
 0618  EB 47                    		jmp	short loc_563C 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 061A                           loc_55F5: 
 061A  42                       		inc	dx 
 061B  B9 0096                  		mov	cx, 150 
 061E                           loc_55F9: 
 061E  EC                       		in	al, dx 
 061F  A8 02                    		test	al, 2 
 0621  74 08                    		jz	short loc_5606 
 0623  E8 06CF R                		call	COMDLY 
 0626  74 F6                    		jz	short loc_55F9 
 0628  EB 08                    		jmp	short loc_560D 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-24
                                                            

                                ; ---------------------------------------------
				------------------------------ 
 062A  90                       		nop 
 062B                           loc_5606: 
 062B  E8 06CF R                		call	COMDLY 
 062E  75 02                    		jnz	short loc_560D 
 0630  E2 F9                    		loop	loc_5606 
 0632                           loc_560D: 
 0632  B0 00                    		mov	al, 0 
 0634  EE                       		out	dx, al 
 0635  83 C2 03                 		add	dx, 3 
 0638  EE                       		out	dx, al 
 0639  E4 21                    		in	al, 21h		; Interrupt controller,	8259A. 
 063B  0A 47 1C                 		or	al, [bx+1Ch] 
 063E  E6 21                    		out	21h, al		; Interrupt controller,	8259A. 
 0640  33 C0                    		xor	ax, ax 
 0642  8E D8                    		mov	ds, ax		; IVT manipulation! 
 0644  2E: 8B 77 1E             		mov	si, cs:[bx+1Eh] 
 0648  2E: 8B 47 10             		mov	ax, cs:[bx+10h] 
 064C  89 04                    		mov	[si], ax 
 064E  2E: 8B 47 12             		mov	ax, cs:[bx+12h] 
 0652  89 44 02                 		mov	[si+2],	ax 
 0655  33 C0                    		xor	ax, ax 
 0657  2E: 89 47 10             		mov	cs:[bx+10h], ax 
 065B  2E: 89 47 12             		mov	cs:[bx+12h], ax 
 065F  B4 00                    		mov	ah, 0 
 0661                           loc_563C: 
 0661  1F                       		pop	ds 
                                		assume ds:nothing 
 0662  5F                       		pop	di 
 0663  5E                       		pop	si 
 0664  5A                       		pop	dx 
 0665  59                       		pop	cx 
 0666  5B                       		pop	bx 
 0667  C3                       		ret 
                                TRMCOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0668                           sub_5643	proc near 
 0668  FA                       		cli 
 0669  8A 47 18                 		mov	al, [bx+18h] 
 066C  C6 47 18 00              		mov	byte ptr [bx+18h], 0 
 0670  FB                       		sti 
 0671  0A C0                    		or	al, al 
 0673  75 04                    		jnz	short loc_5654 
 0675  E8 068A R                		call	sub_5665 
 0678  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-25
                                                            

 0679                           loc_5654: 
 0679  B4 01                    		mov	ah, 1 
 067B  A8 01                    		test	al, 1 
 067D  75 08                    		jnz	short loc_5662 
 067F  B4 06                    		mov	ah, 6 
 0681  A8 02                    		test	al, 2 
 0683  75 02                    		jnz	short loc_5662 
 0685  B4 07                    		mov	ah, 7 
 0687                           loc_5662: 
 0687  0A E4                    		or	ah, ah 
 0689  C3                       		ret 
                                sub_5643	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 068A                           sub_5665	proc near 
 068A  FE C1                    		inc	cl 
 068C  55                       		push	bp 
 068D  8B 77 04                 		mov	si, [bx+4] 
 0690  8B EE                    		mov	bp, si 
 0692  8B 7F 02                 		mov	di, [bx+2] 
 0695  8B 77 06                 		mov	si, [bx+6] 
 0698                           loc_5673: 
 0698  8A 47 19                 		mov	al, [bx+19h] 
 069B  32 E4                    		xor	ah, ah 
 069D  22 C1                    		and	al, cl 
 069F  74 2A                    		jz	short loc_56A6 
 06A1  A8 01                    		test	al, 1 
 06A3  74 04                    		jz	short loc_5684 
 06A5  B4 FF                    		mov	ah, 0FFh 
 06A7  EB 22                    		jmp	short loc_56A6 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 06A9                           loc_5684:				; CODE XREF: sub_5665+19j 
 06A9  A8 80                    		test	al, 80h 
 06AB  74 05                    		jz	short loc_568D 
 06AD  4F                       		dec	di 
 06AE  B4 05                    		mov	ah, 5 
 06B0  74 19                    		jz	short loc_56A6 
                                 
 06B2                           loc_568D:				; CODE XREF: sub_5665+21j 
 06B2  A8 20                    		test	al, 20h 
 06B4  74 05                    		jz	short loc_5696 
 06B6  4E                       		dec	si 
 06B7  B4 04                    		mov	ah, 4 
 06B9  74 10                    		jz	short loc_56A6 
                                 
 06BB                           loc_5696:				; CODE XREF: sub_5665+2Aj 
 06BB  A8 10                    		test	al, 10h 
 06BD  74 05                    		jz	short loc_569F 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-26
                                                            

 06BF  4D                       		dec	bp 
 06C0  B4 03                    		mov	ah, 3 
 06C2  74 07                    		jz	short loc_56A6 
                                 
 06C4                           loc_569F:				; CODE XREF: sub_5665+33j 
 06C4  E8 06CF R                		call	COMDLY 
 06C7  74 CF                    		jz	short loc_5673 
 06C9  B4 FF                    		mov	ah, 0FFh 
                                 
 06CB                           loc_56A6:				; CODE XREF: sub_5665+15j sub_566
				5+1Dj ... 
 06CB  5D                       		pop	bp 
 06CC  0A E4                    		or	ah, ah 
 06CE  C3                       		ret 
                                sub_5665	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 06CF                           COMDLY		proc near		; CODE XREF: SNDCOM+4Bp TRM
				COM+1Cp ... 
 06CF  50                       		push	ax 
 06D0  53                       		push	bx 
 06D1  51                       		push	cx 
 06D2  B9 00F2                  		mov	cx, 242 
                                 
 06D5                           DELAY:					; CODE XREF: COMDLY:DELAYj 
 06D5  E2 FE                    		loop	DELAY 
 06D7  59                       		pop	cx 
 06D8  33 C0                    		xor	ax, ax 
 06DA  1E                       		push	ds 
 06DB  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 06DD  3A 06 0471               		cmp	al, ds:471h	; Check	Ctrl+Break flag 
 06E1  1F                       		pop	ds 
                                		assume ds:nothing 
 06E2  5B                       		pop	bx 
 06E3  58                       		pop	ax 
 06E4  C3                       		ret 
                                COMDLY		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 06E5                           CMPREP		proc near		; CODE XREF: INICOM+Cp	RECC
				OM+9p ... 
 06E5  8A C4                    		mov	al, ah 
 06E7  D0 E0                    		shl	al, 1 
 06E9  B4 00                    		mov	ah, 0 
 06EB  56                       		push	si 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-27
                                                            

 06EC  BE 01F1 R                		mov	si, offset COMTBL 
 06EF  03 F0                    		add	si, ax 
 06F1  8B 1C                    		mov	bx, [si] 
 06F3  8B 17                    		mov	dx, [bx] 
 06F5  33 C0                    		xor	ax, ax 
 06F7  1E                       		push	ds 
 06F8  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 06FA  A2 0471                  		mov	ds:471h, al	; Zero out Ctrl+Break flag 
 06FD  1F                       		pop	ds 
                                		assume ds:nothing 
 06FE  5E                       		pop	si 
 06FF  C3                       		ret 
                                CMPREP		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 8 
                                PUBLIC  SCNRST, GWINI, GWTERM, KEYINP, INKMAP, 
				INFMAP, EDTMAP, MAPSUP 
                                PUBLIC  SCROUT, SCRINP, SCROLL, CLRSCN, CLREOL 
                                PUBLIC  CSRDSP, CSRATR, LCPY, SCRATR, SCRSTT, S
				ETCLR, SWIDTH 
                                 
 0700  00                       EVTSET		db 0			; DATA XREF: TIMISRr RDPEN+22w
				 ... 
 0701  00                       LSTRIG		db 0			; DATA XREF: TIMISR+13w RDTRIG+
				24r ... 
 0702  FF                       BRKFLG		db -1			; DATA XREF: CTLBRKw KEYINP+7
				r ... 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0703                           TIMISR		proc far 
 0703  2E: F6 06 0700 R 01      		test	cs:EVTSET, 1	; Light	pen enabled? 
 0709  74 03                    		jz	short loc_56EE 
 070B  E8 131B R                		call	LPENQR 
                                 
 070E                           loc_56EE: 
 070E  50                       		push	ax 
 070F  52                       		push	dx 
 0710  BA 0201                  		mov	dx, 201h 
 0713  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 0714  F6 D0                    		not	al 
 0716  2E: 08 06 0701 R         		or	cs:LSTRIG, al 
 071B  24 F0                    		and	al, 0F0h 
 071D  2E: 08 06 1306 R         		or	cs:ISREVT, al 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-28
                                                            

 0722  5A                       		pop	dx 
 0723  58                       		pop	ax 
 0724  CF                       		iret 
                                TIMISR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0725                           CTLBRK		proc far 
 0725  2E: C6 06 0702 R 00      		mov	cs:BRKFLG, 0	; 0 = Ctrl+Break, -1 = no br
				eak 
 072B  CF                       		iret 
                                CTLBRK		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Reset	screen related state 
                                 
 072C                           SCNRST		proc near 
 072C  B4 00                    		mov	ah, 0 
 072E  A0 000B R                		mov	al, ds:var_63b 
 0731  B1 19                    		mov	cl, 25 
 0733  E8 0000 E                		call	SCNSWI 
 0736  E8 0000 E                		call	SCNCLR 
 0739  E8 0000 E                		call	GRPINI 
 073C  C3                       		ret 
                                SCNRST		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 073D  00                       EQUIP		db 0 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 073E                           GWINI		proc near 
 073E  E8 0B31 R                		call	SCRSAV 
 0741  1E                       		push	ds 
 0742  33 C0                    		xor	ax, ax 
 0744  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0746  A0 0410                  		mov	al, ds:410h	; Read equipment word (low by
				te) 
 0749  2E: A2 073D R            		mov	cs:EQUIP, al 
 074D  1F                       		pop	ds 
                                		assume ds:nothing 
 074E  A0 000F R                		mov	al, ds:var_63f 
 0751  A2 0000 R                		mov	ds:var_630, al 
 0754  A0 000E R                		mov	al, ds:var_63e 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-29
                                                            

 0757  A2 000B R                		mov	ds:var_63b, al 
 075A  80 3E 000F R 07          		cmp	byte ptr ds:var_63f, 7 
 075F  75 06                    		jnz	short VIDPGE 
 0761  C7 06 0013 R 0C0D        		mov	word ptr ds:var_643, 0C0Dh 
                                 
 0767                           VIDPGE:					; CODE XREF: GWINI+21j 
 0767  B8 0500                  		mov	ax, 500h 
 076A  CD 10                    		int	10h		; - VIDEO - SELECT DISPLAY PAGE 
                                					; AL = display page, 0-7  for modes 0 &	1,
				 0-3	for modes 2 & 3 
 076C  33 D2                    		xor	dx, dx 
                                 
 076E                           INILPT:					; CODE XREF: GWINI+3Aj 
 076E  B4 01                    		mov	ah, 1 
 0770  52                       		push	dx 
 0771  CD 17                    		int	17h		; PRINTER - INITIALIZE 
                                					; DX = printer port (0-3) 
                                					; Return: AH = status 
 0773  5A                       		pop	dx 
 0774  42                       		inc	dx 
 0775  83 FA 03                 		cmp	dx, 3 
 0778  75 F4                    		jnz	short INILPT 
 077A  8C C8                    		mov	ax, cs		; Set segments for interrupt vect
				ors 
 077C  A3 0003 R                		mov	ds:var_633, ax 
 077F  A3 0007 R                		mov	ds:var_637, ax 
 0782  E8 07A6 R                		call	SWPVEC		; Install INT 1Bh/1Ch vectors 
 0785  1E                       		push	ds 
 0786  33 C0                    		xor	ax, ax 
 0788  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 078A  58                       		pop	ax 
 078B  50                       		push	ax 
 078C  A3 0510                  		mov	ds:510h, ax     ; Set initial BASIC data 
				segment 
 078F  A0 0300                  		mov	al, ds:300h 
 0792  1F                       		pop	ds 
                                		assume ds:nothing 
 0793  3C 00                    		cmp	al, 0 
 0795  74 0C                    		jz	short GWINIX 
 0797  BB 0000 E                		mov	bx, offset SPCTAB 
 079A  83 C3 39                 		add	bx, 39h		; Offset of PLAYS entry	in STMDS
				X 
 079D  B8 0000 E                		mov	ax, offset SNERR ; Disable PLAY	statement
				? 
 07A0  2E: 89 07                		mov	cs:[bx], ax 
                                 
 07A3                           GWINIX:					; CODE XREF: GWINI+57j 
 07A3  E9 0B72 R                		jmp	DOCLRS 
                                GWINI		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-30
                                                            

                                 
                                 
 07A6                           SWPVEC		proc near 
 07A6  B9 0004                  		mov	cx, 4		; 4 words (two vectors) 
 07A9  1E                       		push	ds 
 07AA  33 C0                    		xor	ax, ax 
 07AC  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 07AE  BE 006C                  		mov	si, 6Ch		; Offset of vector 1Bh (Ctrl+Bre
				ak) 
 07B1  BF 0631                  		mov	di, 631h 
 07B4  FA                       		cli 
 07B5  FC                       		cld 
 07B6                           DOVEC: 
 07B6  26: 8B 05                		mov	ax, es:[di]	; Read in new offset 
 07B9  87 04                    		xchg	ax, [si]	; Swap in new offset 
 07BB  AB                       		stosw			; Save old offset 
 07BC  46                       		inc	si		; Skip over segment 
 07BD  46                       		inc	si 
 07BE  E2 F6                    		loop	DOVEC 
 07C0  FB                       		sti 
 07C1  1F                       		pop	ds 
                                		assume ds:nothing 
 07C2  C3                       		ret 
                                SWPVEC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 07C3                           GWTERM		proc near 
 07C3  E8 0B31 R                		call	SCRSAV 
 07C6  1E                       		push	ds 
 07C7  33 C0                    		xor	ax, ax 
 07C9  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 07CB  2E: A0 073D R            		mov	al, cs:EQUIP	; Restore equipment word 
 07CF  A2 0410                  		mov	ds:410h, al 
 07D2  1F                       		pop	ds 
                                		assume ds:nothing 
 07D3  B0 FF                    		mov	al, -1 
 07D5  E8 15C1 R                		call	DONOTE 
 07D8  B9 0607                  		mov	cx, 607h	; 8x8 cursor 
 07DB  80 3E 000F R 07          		cmp	byte ptr ds:var_63f, 7 
 07E0  75 03                    		jnz	short SETCSR 
 07E2  B9 0C0D                  		mov	cx, 0C0Dh	; 8x14 cursor 
 07E5                           SETCSR: 
 07E5  B4 01                    		mov	ah, 1 
 07E7  CD 10                    		int	10h		; - VIDEO - SET	CURSOR CHARACTERISTI
				CS 
                                					; CH bits 0-4 =	start line for cursor in c
				haracter cell 
                                					; bits 5-6 = blink attribute 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-31
                                                            

                                					; CL bits 0-4 =	end line for cursor in cha
				racter cell 
 07E9  80 3E 000F R 07          		cmp	byte ptr ds:var_63f, 7 
 07EE  74 19                    		jz	short loc_57E9 
 07F0  33 C0                    		xor	ax, ax 
 07F2  A0 0000 R                		mov	al, ds:var_630 
 07F5  3A 26 000D R             		cmp	ah, ds:var_63d 
 07F9  75 0C                    		jnz	short loc_57E7 
 07FB  3A 26 0009 R             		cmp	ah, ds:var_639 
 07FF  75 06                    		jnz	short loc_57E7 
 0801  3A 06 000F R             		cmp	al, ds:var_63f 
 0805  74 02                    		jz	short loc_57E9 
 0807                           loc_57E7: 
 0807  CD 10                    		int	10h		; - VIDEO - SET	VIDEO MODE 
                                					; AL = mode 
 0809                           loc_57E9: 
 0809  C6 06 0016 R 07          		mov	byte ptr ds:var_646, 7 
 080E  C6 06 000A R 00          		mov	byte ptr ds:var_63a, 0 
 0813  BA 1700                  		mov	dx, 1700h 
 0816  89 16 001E R             		mov	ds:var_64e, dx 
 081A  B7 00                    		mov	bh, 0 
 081C  B4 02                    		mov	ah, 2 
 081E  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0820  E8 07A6 R                		call	SWPVEC 
 0823  E9 0A58 R                		jmp	SCRRST 
                                GWTERM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Keyboard input routine 
                                ; On exit: 
                                ;   ZF set if key available 
                                ;   ZF clear if	no keyboard input 
                                ;   CF set if two bytes	available (AX) 
                                ;   CF clear if	one byte available (AL) 
                                 
 0826                           KEYINP		proc near 
 0826  06                       		push	es 
 0827  0E                       		push	cs 
 0828  07                       		pop	es 
                                		assume es:CSEG 
 0829  53                       		push	bx 
 082A  51                       		push	cx 
 082B  57                       		push	di 
 082C  FC                       		cld 
 082D  2E: 80 3E 0702 R 00      		cmp	cs:BRKFLG, 0	; Zero if Ctrl+Break was sig
				naled 
 0833  75 14                    		jnz	short NOBRK 
 0835  2E: FE 0E 0702 R         		dec	cs:BRKFLG	; Clear	Ctrl+Break flag 
 083A  B4 01                    		mov	ah, 1 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-32
                                                            

 083C  CD 16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CL
				EAR 
                                					; Return: ZF clear if character	in buffer 
                                					; AH = scan code, AL = character 
                                					; ZF set if no character in buffer 
 083E  74 04                    		jz	short CBREAK 
 0840  32 E4                    		xor	ah, ah 
 0842  CD 16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, 
				WAIT IF EMPTY 
                                					; Return: AH = scan code, AL = character 
 0844                           CBREAK: 
 0844  B8 FF03                  		mov	ax, 0FF03h	; CTLBRK aka Ctrl+Break 
 0847  EB 4A                    		jmp	short TWOKEY 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0849                           NOBRK: 
 0849  B4 01                    		mov	ah, 1 
 084B  CD 16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CL
				EAR 
                                					; Return: ZF clear if character	in buffer 
                                					; AH = scan code, AL = character 
                                					; ZF set if no character in buffer 
 084D  74 21                    		jz	short KEYINX 
 084F  32 E4                    		xor	ah, ah 
 0851  CD 16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, 
				WAIT IF EMPTY 
                                					; Return: AH = scan code, AL = character 
 0853  0A C0                    		or	al, al 
 0855  74 1E                    		jz	short NONASC 
 0857  B4 00                    		mov	ah, 0 
 0859  3C FE                    		cmp	al, 0FEh ; '�' 
 085B  72 08                    		jb	short CHKESC 
 085D  B4 FF                    		mov	ah, 0FFh 
 085F  75 32                    		jnz	short TWOKEY 
 0861  B0 18                    		mov	al, 18h 
 0863  EB 2E                    		jmp	short TWOKEY 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0865                           CHKESC: 
 0865  3C 1B                    		cmp	al, 1Bh		; ESC key? 
 0867  75 05                    		jnz	short ONEKEY 
 0869  B8 FF15                  		mov	ax, 0FF15h 
 086C  EB 25                    		jmp	short TWOKEY 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 086E                           ONEKEY: 
 086E  0B E4                    		or	sp, sp 
 0870                           KEYINX: 
 0870  5F                       		pop	di 
 0871  59                       		pop	cx 
 0872  5B                       		pop	bx 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-33
                                                            

 0873  07                       		pop	es 
                                		assume es:nothing 
 0874  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0875                           NONASC: 
 0875  86 C4                    		xchg	al, ah 
 0877  BF 08B1 R                		mov	di, offset SCNXLT 
 087A  B9 0039                  		mov	cx, 57 
 087D  FC                       		cld 
 087E  F2/ AE                   		repne scasb 
 0880  75 16                    		jnz	short NOTTAB 
 0882  81 EF 08B1 R             		sub	di, offset SCNXLT 
 0886  8B C7                    		mov	ax, di 
 0888  3D 0020                  		cmp	ax, 20h 
 088B  B4 FF                    		mov	ah, 0FFh 
 088D  72 04                    		jb	short TWOKEY 
 088F  04 21                    		add	al, 21h	; '!' 
 0891                           loc_5871: 
 0891  B4 80                    		mov	ah, 80h 
 0893                           TWOKEY: 
 0893  0B E4                    		or	sp, sp 
 0895  F9                       		stc 
 0896  EB D8                    		jmp	short KEYINX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0898                           NOTTAB: 
 0898  3C 3B                    		cmp	al, 3Bh	; ';' 
 089A  72 08                    		jb	short loc_5884 
 089C  3C 45                    		cmp	al, 45h	; 'E' 
 089E  73 04                    		jnb	short loc_5884 
 08A0  2C 1B                    		sub	al, 1Bh 
 08A2  EB ED                    		jmp	short loc_5871 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 08A4                           loc_5884: 
 08A4  3C 53                    		cmp	al, 53h	; 'S' 
 08A6  8B D0                    		mov	dx, ax 
 08A8  B0 FE                    		mov	al, 0FEh 
 08AA  75 C2                    		jnz	short ONEKEY 
 08AC  B8 FF7F                  		mov	ax, 0FF7Fh 
 08AF  EB E2                    		jmp	short TWOKEY 
                                KEYINP		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 08B1  FA 73                    SCNXLT		db 0FAh, 73h, 2	dup(0FAh), 75h,	74h, 4 
				dup(0F9h), 47h 
       0002[                    SCNXLT		db 0FAh, 73h, 2	dup(0FAh), 75h,	74h, 4 
				dup(0F9h), 47h 
            FA                  
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-34
                                                            

                         ]      
       0004[   75 74            
            F9                  
                         ]      
               47               
                                					; DATA XREF: KEYINP+51o KEYINP+5Co ... 
 08BC  77 F9 4F F9              		db 77h,	0F9h, 4Fh, 0F9h, 2 dup(0FAh), 52h, 2 
				dup(0FAh) 
       0002[                    		db 77h,	0F9h, 4Fh, 0F9h, 2 dup(0FAh), 52h, 2 
				dup(0FAh) 
            FA                  
                         ]      
       0002[   52               
            FA                  
                         ]      
                                
 08C5  F9                       		db 0F9h, 2 dup(0FAh), 0FEh, 3 dup(0FAh), 4Dh,
				 4Bh, 48h 
       0002[                    		db 0F9h, 2 dup(0FAh), 0FEh, 3 dup(0FAh), 4Dh,
				 4Bh, 48h 
            FA                  
                         ]      
       0003[   FE               
            FA                  
                         ]      
               4D 4B 48         
 08CF  50 1E 30 2E 20 12 21     		db 50h,	1Eh, 30h, 2Eh, 20h, 12h, 21h, 22h, 23
				h,	17h, 24h 
       22 23 17 24              
 08DA  25 26 32 31 18 19 10     		db 25h,	26h, 32h, 31h, 18h, 19h, 10h, 13h, 1F
				h,	14h, 16h 
       13 1F 14 16              
 08E5  2F 11 2D 15 2C           		db 2Fh,	11h, 2Dh, 15h, 2Ch 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; OEM map routine for INKEY$ 
                                 
 08EA                           INKMAP		proc near 
 08EA  53                       		push	bx 
 08EB  72 11                    		jb	short loc_58DE 
 08ED  3C FE                    		cmp	al, 0FEh ; '�' 
 08EF  75 09                    		jnz	short loc_58DA 
 08F1  8B C2                    		mov	ax, dx 
                                 
 08F3                           loc_58D3:				; CODE XREF: INKMAP+26j INKMAP+3C
				j ... 
 08F3  B4 00                    		mov	ah, 0 
 08F5  0B E4                    		or	sp, sp 
 08F7  F9                       		stc 
 08F8  5B                       		pop	bx 
 08F9  C3                       		ret 
                                ; ---------------------------------------------
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-35
                                                            

				------------------------------ 
                                 
 08FA                           loc_58DA:				; CODE XREF: INKMAP+5j	INKMAP+16
				j ... 
 08FA  0B E4                    		or	sp, sp 
                                 
 08FC                           loc_58DC:				; CODE XREF: INKMAP+38j INKMAP+60
				j 
 08FC  5B                       		pop	bx 
 08FD  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 08FE                           loc_58DE:				; CODE XREF: INKMAP+1j 
 08FE  3C FF                    		cmp	al, 0FFh 
 0900  74 F8                    		jz	short loc_58DA 
 0902  3C 15                    		cmp	al, 15h 
 0904  75 04                    		jnz	short loc_58EA 
 0906  B0 1B                    		mov	al, 1Bh 
 0908  EB F0                    		jmp	short loc_58DA 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 090A                           loc_58EA:				; CODE XREF: INKMAP+1Aj 
 090A  3C 7F                    		cmp	al, 7Fh	; '' 
 090C  75 04                    		jnz	short loc_58F2 
 090E  B0 53                    		mov	al, 53h	; 'S' 
 0910  EB E1                    		jmp	short loc_58D3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0912                           loc_58F2:				; CODE XREF: INKMAP+22j 
 0912  3C 20                    		cmp	al, 20h	; ' ' 
 0914  73 14                    		jnb	short loc_590A 
 0916  BB 5890                  		mov	bx, 5890h 
 0919  B4 00                    		mov	ah, 0 
 091B  03 D8                    		add	bx, ax 
 091D  2E: 8A 07                		mov	al, cs:[bx] 
 0920  3C FA                    		cmp	al, 0FAh ; '�' 
 0922  74 D8                    		jz	short loc_58DC 
 0924  3C FE                    		cmp	al, 0FEh ; '�' 
 0926  72 CB                    		jb	short loc_58D3 
 0928  EB D0                    		jmp	short loc_58DA 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 092A                           loc_590A:				; CODE XREF: INKMAP+2Aj 
 092A  3C 2A                    		cmp	al, 2Ah	; '*' 
 092C  73 04                    		jnb	short loc_5912 
 092E  04 1B                    		add	al, 1Bh 
 0930  EB C1                    		jmp	short loc_58D3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-36
                                                            

 0932                           loc_5912:				; CODE XREF: INKMAP+42j 
 0932  3C 41                    		cmp	al, 'A' 
 0934  72 12                    		jb	short loc_5928 
 0936  3C 5B                    		cmp	al, 5Bh	; '[' 
 0938  73 0E                    		jnb	short loc_5928 
 093A  2C 41                    		sub	al, 'A' 
 093C  B4 00                    		mov	ah, 0 
 093E  BB 08D0 R                		mov	bx, (offset SCNXLT+1Fh) 
 0941  03 D8                    		add	bx, ax 
 0943  2E: 8A 07                		mov	al, cs:[bx] 
 0946  EB AB                    		jmp	short loc_58D3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0948                           loc_5928:				; CODE XREF: INKMAP+4Aj INKMAP+4E
				j 
 0948  3A C0                    		cmp	al, al 
 094A  EB B0                    		jmp	short loc_58DC 
                                INKMAP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; OEM fixed length input map routine 
                                 
 094C                           INFMAP		proc near		; CODE XREF: INCHRI+16p 
 094C  E8 08EA R                		call	INKMAP 
 094F  73 02                    		jnb	short loc_5933 
 0951  B0 00                    		mov	al, 0 
                                 
 0953                           loc_5933:				; CODE XREF: INFMAP+3j 
 0953  F8                       		clc 
 0954  C3                       		ret 
                                INFMAP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Map edit function/output character code 
                                 
 0955                           EDTMAP		proc near		; CODE XREF: CTLDSP+21p 
 0955  C6 06 0011 R 00          		mov	byte ptr ds:var_641, 0 
 095A  3D 0003                  		cmp	ax, 3 
 095D  74 44                    		jz	short loc_5983 
 095F  80 FC FF                 		cmp	ah, 0FFh 
 0962  75 19                    		jnz	short loc_595D 
 0964  3C 18                    		cmp	al, 18h 
 0966  75 05                    		jnz	short loc_594D 
 0968  B8 00FE                  		mov	ax, 0FEh 
 096B  EB 3C                    		jmp	short loc_5989 
                                ; ---------------------------------------------
				------------------------------ 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-37
                                                            

                                 
 096D                           loc_594D:				; CODE XREF: EDTMAP+11j 
 096D  3C FF                    		cmp	al, 0FFh 
 096F  75 32                    		jnz	short loc_5983 
 0971  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0976  74 2B                    		jz	short loc_5983 
 0978  B8 0020                  		mov	ax, ' ' 
 097B  EB 2C                    		jmp	short loc_5989 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 097D                           loc_595D:				; CODE XREF: EDTMAP+Dj 
 097D  3C 1B                    		cmp	al, 1Bh 
 097F  75 04                    		jnz	short loc_5965 
 0981  B0 15                    		mov	al, 15h 
 0983  EB 1E                    		jmp	short loc_5983 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0985                           loc_5965:				; CODE XREF: EDTMAP+2Aj 
 0985  3C FF                    		cmp	al, 0FFh 
 0987  74 1A                    		jz	short loc_5983 
 0989  3C 7F                    		cmp	al, 7Fh 
 098B  74 16                    		jz	short loc_5983 
 098D  3C 20                    		cmp	al, ' ' 
 098F  73 18                    		jnb	short loc_5989 
 0991  50                       		push	ax 
 0992  53                       		push	bx 
 0993  B4 00                    		mov	ah, 0 
 0995  BB 08B0 R                		mov	bx, offset SCNXLT - 1 
 0998  03 D8                    		add	bx, ax 
 099A  2E: 8A 07                		mov	al, cs:[bx] 
 099D  3C FA                    		cmp	al, 0FAh 
 099F  5B                       		pop	bx 
 09A0  58                       		pop	ax 
 09A1  74 08                    		jz	short loc_598B 
                                 
 09A3                           loc_5983:				; CODE XREF: EDTMAP+8j	EDTMAP+1A
				j ... 
 09A3  B4 FF                    		mov	ah, 0FFh 
 09A5  0B E4                    		or	sp, sp 
 09A7  F9                       		stc 
 09A8  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 09A9                           loc_5989:				; CODE XREF: EDTMAP+16j EDTMAP+26
				j ... 
 09A9  0B E4                    		or	sp, sp 
                                 
 09AB                           loc_598B:				; CODE XREF: EDTMAP+4Cj 
 09AB  F8                       		clc 
 09AC  C3                       		ret 
                                EDTMAP		endp 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-38
                                                            

                                 
                                ; ---------------------------------------------
				------------------------------ 
 09AD  C3                       		ret 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Map super shift key to letter	in [AL]	and cou
				nt in [CH] 
                                 
 09AE                           MAPSUP		proc near		; CODE XREF: CHKFKY+39p 
 09AE  B5 01                    		mov	ch, 1 
 09B0  C3                       		ret 
                                MAPSUP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Write	the character in [AL] at (DH,DL) 
                                 
 09B1                           SCROUT		proc near		; CODE XREF: KEYDCH+17p SCN
				OUT+13p ... 
 09B1  50                       		push	ax 
 09B2  53                       		push	bx 
 09B3  51                       		push	cx 
 09B4  52                       		push	dx 
 09B5  81 EA 0101               		sub	dx, 101h 
 09B9  86 D6                    		xchg	dl, dh 
 09BB  50                       		push	ax 
 09BC  89 16 001E R             		mov	ds:var_64e, dx 
 09C0  8A 3E 0009 R             		mov	bh, ds:var_639 
 09C4  B4 02                    		mov	ah, 2 
 09C6  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 09C8  58                       		pop	ax 
 09C9  B9 0001                  		mov	cx, 1 
 09CC  8A 1E 0016 R             		mov	bl, ds:var_646 
 09D0  B4 09                    		mov	ah, 9 
 09D2  CD 10                    		int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACT
				ERS	AT CURSOR POSITION 
                                					; AL = character, BH = display page 
                                					; BL = attributes of character (alpha mode
				s) or	color (graphics	modes) 
                                					; CX = number of times to write	character 
 09D4  F8                       		clc 
 09D5  5A                       		pop	dx 
 09D6  59                       		pop	cx 
 09D7  5B                       		pop	bx 
 09D8  58                       		pop	ax 
 09D9  C3                       		ret 
                                SCROUT		endp 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-39
                                                            

                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 09DA                           SCRSV2		proc near 
 09DA  8F 06 0020 R             		pop	word ptr ds:var_650 
 09DE  52                       		push	dx 
 09DF  51                       		push	cx 
 09E0  53                       		push	bx 
 09E1  50                       		push	ax 
 09E2  9C                       		pushf 
 09E3  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 09E8  74 11                    		jz	short loc_59DB 
 09EA  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 09EF  74 07                    		jz	short loc_59D8 
 09F1  80 3E 0010 R 02          		cmp	byte ptr ds:var_640, 2 
 09F6  75 03                    		jnz	short loc_59DB 
                                 
 09F8                           loc_59D8:				; CODE XREF: SCRSV2+15j 
 09F8  E8 0C18 R                		call	sub_5BF8 
                                 
 09FB                           loc_59DB:				; CODE XREF: SCRSV2+Ej	SCRSV2+1C
				j 
 09FB  50                       		push	ax 
 09FC  81 EA 0101               		sub	dx, 101h 
 0A00  86 D6                    		xchg	dl, dh 
 0A02  89 16 001E R             		mov	ds:var_64e, dx 
 0A06  8A 3E 0009 R             		mov	bh, ds:var_639 
 0A0A  B4 02                    		mov	ah, 2 
 0A0C  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0A0E  58                       		pop	ax 
 0A0F  9D                       		popf 
 0A10  FF 36 0020 R             		push	word ptr ds:var_650 
 0A14  C3                       		ret 
                                SCRSV2		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0A15                           SCRINP		proc near 
                                					; SCNMRK:loc_987Dp ... 
 0A15  E8 09DA R                		call	SCRSV2 
 0A18  9C                       		pushf 
 0A19  B4 08                    		mov	ah, 8 
 0A1B  CD 10                    		int	10h		; - VIDEO - READ ATTRIBUTES/CHARACTE
				R AT CURSOR	POSITION 
                                					; BH = display page 
                                					; Return: AL = character 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-40
                                                            

                                					; AH = attribute of character (alpha modes
				) 
 0A1D  9D                       		popf 
 0A1E  72 06                    		jb	short loc_5A06 
 0A20  0A C0                    		or	al, al 
 0A22  75 02                    		jnz	short loc_5A06 
 0A24  B0 20                    		mov	al, ' ' 
                                 
 0A26                           loc_5A06:				; CODE XREF: SCRINP+9j	SCRINP+Dj
				 
 0A26  32 E4                    		xor	ah, ah 
 0A28  5A                       		pop	dx 
 0A29  50                       		push	ax 
 0A2A  EB 2C                    		jmp	short SCRRST 
                                SCRINP		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 0A2C  90                       		nop 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0A2D                           SCROLL		proc near 
 0A2D  E8 0B31 R                		call	SCRSAV 
 0A30  86 C4                    		xchg	al, ah 
 0A32  86 DF                    		xchg	bl, bh 
 0A34  86 CD                    		xchg	cl, ch 
 0A36  BA 0101                  		mov	dx, 101h 
 0A39  2B C2                    		sub	ax, dx 
 0A3B  2B DA                    		sub	bx, dx 
 0A3D  2B CA                    		sub	cx, dx 
 0A3F  3A E7                    		cmp	ah, bh 
 0A41  75 34                    		jnz	short loc_5A57 
 0A43  3A D8                    		cmp	bl, al 
 0A45  C6 06 000C R 01          		mov	byte ptr ds:var_63c, 1 
 0A4A  72 09                    		jb	short loc_5A35 
 0A4C  C6 06 000C R FF          		mov	byte ptr ds:var_63c, 0FFh 
 0A51  02 C1                    		add	al, cl 
 0A53  02 D9                    		add	bl, cl 
 0A55                           loc_5A35: 
 0A55  E8 0AE5 R                		call	DOSCRL 
 0A58                           SCRRST: 
 0A58  9C                       		pushf 
 0A59  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0A5E  74 11                    		jz	short loc_5A51 
 0A60  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 0A65  74 07                    		jz	short loc_5A4E 
 0A67  80 3E 0010 R 02          		cmp	byte ptr ds:var_640, 2 
 0A6C  75 03                    		jnz	short loc_5A51 
 0A6E                           loc_5A4E: 
 0A6E  E8 0C18 R                		call	sub_5BF8 
 0A71                           loc_5A51: 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-41
                                                            

 0A71  9D                       		popf 
 0A72  58                       		pop	ax		; Restores registers that SCRSAV save
				d 
 0A73  5B                       		pop	bx 
 0A74  59                       		pop	cx 
 0A75  5A                       		pop	dx 
 0A76  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0A77                           loc_5A57: 
 0A77  3A C3                    		cmp	al, bl 
 0A79  75 2E                    		jnz	short loc_5A89 
 0A7B  E8 0ACE R                		call	SETVPG 
 0A7E  3A FC                    		cmp	bh, ah 
 0A80  73 08                    		jnb	short loc_5A6A 
 0A82  03 C1                    		add	ax, cx 
 0A84  8B CB                    		mov	cx, bx 
 0A86  B3 06                    		mov	bl, 6 
 0A88  EB 05                    		jmp	short loc_5A6F 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0A8A                           loc_5A6A: 
 0A8A  91                       		xchg	ax, cx 
 0A8B  03 C3                    		add	ax, bx 
 0A8D  B3 07                    		mov	bl, 7 
 0A8F                           loc_5A6F: 
 0A8F  8B D0                    		mov	dx, ax 
 0A91  8A E3                    		mov	ah, bl 
 0A93  B0 01                    		mov	al, 1 
 0A95  8A 3E 0016 R             		mov	bh, ds:var_646 
 0A99  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0A9E  74 02                    		jz	short loc_5A82 
 0AA0  B7 00                    		mov	bh, 0 
 0AA2                           loc_5A82: 
 0AA2  CD 10                    		int	10h		; - VIDEO - SCROLL PAGE	DOWN 
                                					; AL = number of lines to scroll window	(0
				 = blank whole window) 
                                					; BH = attributes to be	used on	blanked	li
				nes 
                                					; CH,CL	= row,column of	upper left corner 
				of window to scroll 
                                					; DH,DL	= row,column of	lower right corner
				 of window 
 0AA4  E8 0ACE R                		call	SETVPG 
 0AA7  EB AF                    		jmp	short SCRRST 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0AA9                           loc_5A89: 
 0AA9  C6 06 000A R 01          		mov	byte ptr ds:var_63a, 1 
 0AAE  3A D8                    		cmp	bl, al 
 0AB0  72 0B                    		jb	short loc_5A9D 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-42
                                                            

 0AB2  03 C1                    		add	ax, cx 
 0AB4  03 D9                    		add	bx, cx 
 0AB6  C6 06 000C R FF          		mov	byte ptr ds:var_63c, 0FFh 
 0ABB  FE C5                    		inc	ch 
 0ABD                           loc_5A9D: 
 0ABD  E8 0AE5 R                		call	DOSCRL 
 0AC0  FE CD                    		dec	ch 
 0AC2  74 94                    		jz	short SCRRST 
 0AC4  02 26 000C R             		add	ah, ds:var_63c 
 0AC8  02 3E 000C R             		add	bh, ds:var_63c 
 0ACC  EB EF                    		jmp	short loc_5A9D 
                                SCROLL		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set display page 
                                 
 0ACE                           SETVPG		proc near		; CODE XREF: SCROLL+4Ep SCR
				OLL+77p ... 
 0ACE  50                       		push	ax 
 0ACF  A0 000D R                		mov	al, ds:var_63d 
 0AD2  3A 06 0009 R             		cmp	al, ds:var_639 
 0AD6  74 0B                    		jz	short SETVPX 
 0AD8  86 06 0009 R             		xchg	al, ds:var_639 
 0ADC  A2 000D R                		mov	ds:var_63d, al 
 0ADF  B4 05                    		mov	ah, 5 
 0AE1  CD 10                    		int	10h		; - VIDEO - SELECT DISPLAY PAGE 
                                					; AL = display page, 0-7  for modes 0 &	1,
				 0-3	for modes 2 & 3 
 0AE3                           SETVPX: 
 0AE3  58                       		pop	ax 
 0AE4  C3                       		ret 
                                SETVPG		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0AE5                           DOSCRL		proc near		; CODE XREF: SCROLL:loc_5A35
				p 
                                					; SCROLL:loc_5A9Dp 
 0AE5  50                       		push	ax 
 0AE6  53                       		push	bx 
 0AE7  51                       		push	cx 
 0AE8  8B D0                    		mov	dx, ax 
 0AEA  B5 00                    		mov	ch, 0 
 0AEC  FE C1                    		inc	cl 
 0AEE  74 14                    		jz	short DOSCRX 
                                 
 0AF0                           NXTCHR:					; CODE XREF: DOSCRL+1Dj 
 0AF0  E8 0B08 R                		call	SCRRDC 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-43
                                                            

 0AF3  02 16 000C R             		add	dl, ds:var_63c 
 0AF7  87 D3                    		xchg	dx, bx 
 0AF9  E8 0B17 R                		call	SCRWRC 
 0AFC  02 16 000C R             		add	dl, ds:var_63c 
 0B00  87 D3                    		xchg	dx, bx 
 0B02  E2 EC                    		loop	NXTCHR 
                                 
 0B04                           DOSCRX:					; CODE XREF: DOSCRL+9j 
 0B04  59                       		pop	cx 
 0B05  5B                       		pop	bx 
 0B06  58                       		pop	ax 
 0B07  C3                       		ret 
                                DOSCRL		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B08                           SCRRDC		proc near		; CODE XREF: DOSCRL:NXTCHRp
				 
 0B08  53                       		push	bx 
 0B09  8A 3E 0009 R             		mov	bh, ds:var_639 
 0B0D  B4 02                    		mov	ah, 2 
 0B0F  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0B11  B4 08                    		mov	ah, 8 
 0B13  CD 10                    		int	10h		; - VIDEO - READ ATTRIBUTES/CHARACTE
				R AT CURSOR	POSITION 
                                					; BH = display page 
                                					; Return: AL = character 
                                					; AH = attribute of character (alpha modes
				) 
 0B15  5B                       		pop	bx 
 0B16  C3                       		ret 
                                SCRRDC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B17                           SCRWRC		proc near		; CODE XREF: DOSCRL+14p 
 0B17  53                       		push	bx 
 0B18  51                       		push	cx 
 0B19  50                       		push	ax 
 0B1A  8A 3E 0009 R             		mov	bh, ds:var_639 
 0B1E  B4 02                    		mov	ah, 2 
 0B20  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0B22  58                       		pop	ax 
 0B23  B9 0001                  		mov	cx, 1 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-44
                                                            

 0B26  8A 1E 0016 R             		mov	bl, ds:var_646 
 0B2A  B4 09                    		mov	ah, 9 
 0B2C  CD 10                    		int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACT
				ERS	AT CURSOR POSITION 
                                					; AL = character, BH = display page 
                                					; BL = attributes of character (alpha mode
				s) or	color (graphics	modes) 
                                					; CX = number of times to write	character 
 0B2E  59                       		pop	cx 
 0B2F  5B                       		pop	bx 
 0B30  C3                       		ret 
                                SCRWRC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B31                           SCRSAV		proc near		; CODE XREF: GWINIp GWTERM
				p ... 
 0B31  8F 06 0020 R             		pop	word ptr ds:var_650 
 0B35  52                       		push	dx 
 0B36  51                       		push	cx 
 0B37  53                       		push	bx 
 0B38  50                       		push	ax 
 0B39  50                       		push	ax 
 0B3A  53                       		push	bx 
 0B3B  51                       		push	cx 
 0B3C  52                       		push	dx 
 0B3D  9C                       		pushf 
 0B3E  B4 0F                    		mov	ah, 0Fh 
 0B40  CD 10                    		int	10h		; - VIDEO - GET	CURRENT	VIDEO MODE 
                                					; Return: AH = number of columns on screen
				 
                                					; AL = current video mode 
                                					; BH = current active display page 
 0B42  88 3E 000D R             		mov	ds:var_63d, bh 
 0B46  88 26 000E R             		mov	ds:var_63e, ah 
 0B4A  A2 000F R                		mov	ds:var_63f, al 
 0B4D  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0B52  74 11                    		jz	short loc_5B45 
 0B54  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 0B59  74 07                    		jz	short loc_5B42 
 0B5B  80 3E 0010 R 02          		cmp	byte ptr ds:var_640, 2 
 0B60  75 03                    		jnz	short loc_5B45 
                                 
 0B62                           loc_5B42:				; CODE XREF: SCRSAV+28j 
 0B62  E8 0C18 R                		call	sub_5BF8 
                                 
 0B65                           loc_5B45:				; CODE XREF: SCRSAV+21j SCRSAV+2F
				j 
 0B65  9D                       		popf 
 0B66  5A                       		pop	dx 
 0B67  59                       		pop	cx 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-45
                                                            

 0B68  5B                       		pop	bx 
 0B69  58                       		pop	ax 
 0B6A  FF 36 0020 R             		push	word ptr ds:var_650 
 0B6E  C3                       		ret 
                                SCRSAV		endp ; sp-analysis failed 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B6F                           CLRSCN		proc near 
 0B6F  E8 0B31 R                		call	SCRSAV 
                                 
 0B72                           DOCLRS: 
 0B72  50                       		push	ax 
 0B73  E8 0ACE R                		call	SETVPG 
 0B76  33 C9                    		xor	cx, cx		; Start	at 0,0 
 0B78  8A 16 000B R             		mov	dl, ds:var_63b 
 0B7C  FE CA                    		dec	dl 
 0B7E  B6 18                    		mov	dh, 24		; End at 24, width 
 0B80  B8 0600                  		mov	ax, 600h 
 0B83  8A 3E 0016 R             		mov	bh, ds:var_646 
 0B87  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0B8C  74 02                    		jz	short SCROL 
 0B8E  B7 00                    		mov	bh, 0 
                                 
 0B90                           SCROL:					; CODE XREF: CLRSCN+1Dj 
 0B90  CD 10                    		int	10h		; - VIDEO - SCROLL PAGE	UP 
                                					; AL = number of lines to scroll window	(0
				 = blank whole window) 
                                					; BH = attributes to be	used on	blanked	li
				nes 
                                					; CH,CL	= row,column of	upper left corner 
				of window to scroll 
                                					; DH,DL	= row,column of	lower right corner
				 of window 
 0B92  E8 0ACE R                		call	SETVPG 
 0B95  58                       		pop	ax 
 0B96  E8 072C R                		call	SCNRST 
 0B99  E9 0EF8 R                		jmp	SCNOK 
                                CLRSCN		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B9C                           CLREOL		proc near		; CODE XREF: KEYDSP+Ep	PLIN
				IT+19p 
 0B9C  50                       		push	ax 
 0B9D  53                       		push	bx 
 0B9E  51                       		push	cx 
 0B9F  52                       		push	dx 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-46
                                                            

 0BA0  81 EA 0101               		sub	dx, 101h 
 0BA4  A0 000B R                		mov	al, ds:var_63b 
 0BA7  2A C6                    		sub	al, dh 
 0BA9  76 18                    		jbe	short CLREOX 
 0BAB  8A C8                    		mov	cl, al 
 0BAD  B5 00                    		mov	ch, 0 
 0BAF  86 D6                    		xchg	dl, dh 
 0BB1  8A 3E 0009 R             		mov	bh, ds:var_639 
 0BB5  B4 02                    		mov	ah, 2 
 0BB7  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0BB9  B0 20                    		mov	al, ' ' 
 0BBB  8A 1E 0016 R             		mov	bl, ds:var_646 
 0BBF  B4 09                    		mov	ah, 9 
 0BC1  CD 10                    		int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACT
				ERS	AT CURSOR POSITION 
                                					; AL = character, BH = display page 
                                					; BL = attributes of character (alpha mode
				s) or	color (graphics	modes) 
                                					; CX = number of times to write	character 
 0BC3                           CLREOX: 
 0BC3  5A                       		pop	dx 
 0BC4  59                       		pop	cx 
 0BC5  5B                       		pop	bx 
 0BC6  58                       		pop	ax 
 0BC7  C3                       		ret 
                                CLREOL		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0BC8                           CSRDSP		proc near 
 0BC8  E8 09DA R                		call	SCRSV2 
 0BCB  38 06 0010 R             		cmp	ds:var_640, al 
 0BCF  74 15                    		jz	short loc_5BC6 
 0BD1  A2 0010 R                		mov	ds:var_640, al 
 0BD4  3C 00                    		cmp	al, 0 
 0BD6  75 11                    		jnz	short loc_5BC9 
 0BD8  8B 0E 0013 R             		mov	cx, ds:var_643 
 0BDC  80 CD 20                 		or	ch, 20h 
 0BDF                           SETCUR: 
 0BDF  A2 0012 R                		mov	ds:var_642, al 
 0BE2  B4 01                    		mov	ah, 1 
 0BE4  CD 10                    		int	10h		; - VIDEO - SET	CURSOR CHARACTERISTI
				CS 
                                					; CH bits 0-4 =	start line for cursor in c
				haracter cell 
                                					; bits 5-6 = blink attribute 
                                					; CL bits 0-4 =	end line for cursor in cha
				racter cell 
 0BE6                           loc_5BC6: 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-47
                                                            

 0BE6  E9 0EF8 R                		jmp	SCNOK 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0BE9                           loc_5BC9: 
 0BE9  3C 01                    		cmp	al, 1 
 0BEB  75 0E                    		jnz	short loc_5BDB 
 0BED  B9 0407                  		mov	cx, 407h 
 0BF0  80 3E 000F R 07          		cmp	byte ptr ds:var_63f, 7 
 0BF5  75 E8                    		jnz	short SETCUR 
 0BF7  B1 0D                    		mov	cl, 0Dh 
 0BF9  EB E4                    		jmp	short SETCUR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0BFB                           loc_5BDB: 
 0BFB  3C 02                    		cmp	al, 2 
 0BFD  75 09                    		jnz	short GOSCUR 
 0BFF  8B 0E 0013 R             		mov	cx, ds:var_643 
 0C03  80 E5 DF                 		and	ch, 0DFh 
 0C06  EB D7                    		jmp	short SETCUR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0C08                           GOSCUR: 
 0C08  8B 0E 0013 R             		mov	cx, ds:var_643 
 0C0C  A0 0011 R                		mov	al, ds:var_641 
 0C0F  0A C0                    		or	al, al 
 0C11  75 CC                    		jnz	short SETCUR 
 0C13  80 CD 20                 		or	ch, 20h 
 0C16  EB C7                    		jmp	short SETCUR 
                                CSRDSP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0C18                           sub_5BF8	proc near		; CODE XREF: SCRSV2:loc_59D
				8p 
                                					; SCROLL:loc_5A4Ep ... 
 0C18  50                       		push	ax 
 0C19  53                       		push	bx 
 0C1A  51                       		push	cx 
 0C1B  52                       		push	dx 
 0C1C  8B 1E 001E R             		mov	bx, ds:var_64e 
 0C20  B8 0140                  		mov	ax, 320 
 0C23  33 C9                    		xor	cx, cx 
 0C25  86 F9                    		xchg	bh, cl 
 0C27  F7 E1                    		mul	cx 
 0C29  8A 16 000A R             		mov	dl, ds:var_63a 
 0C2D  80 FA 01                 		cmp	dl, 1 
 0C30  75 02                    		jnz	short loc_5C14 
 0C32  D1 E3                    		shl	bx, 1 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-48
                                                            

 0C34                           loc_5C14: 
 0C34  03 D8                    		add	bx, ax 
 0C36  81 C3 00F0               		add	bx, 0F0h ; '�' 
 0C3A  B9 0004                  		mov	cx, 4 
 0C3D  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 0C42  75 02                    		jnz	short loc_5C26 
 0C44  49                       		dec	cx 
 0C45  49                       		dec	cx 
 0C46                           loc_5C26: 
 0C46  B8 B800                  		mov	ax, 0B800h 
 0C49  1E                       		push	ds 
 0C4A  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0C4C  B8 FFFF                  		mov	ax, 0FFFFh 
 0C4F  80 FA 01                 		cmp	dl, 1 
 0C52  BA 2000                  		mov	dx, 2000h 
 0C55  75 0F                    		jnz	short loc_5C46 
 0C57                           loc_5C37: 
 0C57  03 DA                    		add	bx, dx 
 0C59  31 07                    		xor	[bx], ax 
 0C5B  2B DA                    		sub	bx, dx 
 0C5D  31 07                    		xor	[bx], ax 
 0C5F  83 EB 50                 		sub	bx, 80 
 0C62  E2 F3                    		loop	loc_5C37 
 0C64  EB 0D                    		jmp	short loc_5C53 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0C66                           loc_5C46: 
 0C66  03 DA                    		add	bx, dx 
 0C68  30 07                    		xor	[bx], al 
 0C6A  2B DA                    		sub	bx, dx 
 0C6C  30 07                    		xor	[bx], al 
 0C6E  83 EB 50                 		sub	bx, 80 
 0C71  E2 F3                    		loop	loc_5C46 
 0C73                           loc_5C53: 
 0C73  1F                       		pop	ds 
                                		assume ds:nothing 
 0C74  5A                       		pop	dx 
 0C75  59                       		pop	cx 
 0C76  5B                       		pop	bx 
 0C77  58                       		pop	ax 
 0C78  C3                       		ret 
                                sub_5BF8	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0C79                           CSRATR		proc near 
 0C79  E8 0B31 R                		call	SCRSAV 
 0C7C  0A E4                    		or	ah, ah 
 0C7E  75 03                    		jnz	short loc_5C63 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-49
                                                            

 0C80  A0 0011 R                		mov	al, ds:var_641 
 0C83                           loc_5C63: 
 0C83  A2 0011 R                		mov	ds:var_641, al 
 0C86  0A FF                    		or	bh, bh 
 0C88  75 05                    		jnz	short loc_5C6F 
 0C8A  A1 0013 R                		mov	ax, ds:var_643 
 0C8D  8A DC                    		mov	bl, ah 
 0C8F                           loc_5C6F: 
 0C8F  0A ED                    		or	ch, ch 
 0C91  75 06                    		jnz	short loc_5C79 
 0C93  0A FF                    		or	bh, bh 
 0C95  74 10                    		jz	short GSTCUR 
 0C97  8A CB                    		mov	cl, bl 
 0C99                           loc_5C79: 
 0C99  8A FB                    		mov	bh, bl 
 0C9B  8A D9                    		mov	bl, cl 
 0C9D  F7 C3 E0E0               		test	bx, 0E0E0h 
 0CA1  75 07                    		jnz	short CSRERR 
 0CA3  89 1E 0013 R             		mov	ds:var_643, bx 
 0CA7                           GSTCUR: 
 0CA7  E9 0C08 R                		jmp	GOSCUR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0CAA                           CSRERR: 
 0CAA  E9 0EFC R                		jmp	SCNERR 
                                CSRATR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0CAD                           LCPY		proc near 
 0CAD  E8 0B31 R                		call	SCRSAV 
 0CB0  CD 05                    		int	5		;  - PRINT-SCREEN KEY 
                                					; automatically	called by keyboard scanner
				 when	print-screen key is pressed 
 0CB2  E8 0A58 R                		call	SCRRST 
                                LCPY		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0CB5                           SCRATR		proc near 
 0CB5  50                       		push	ax 
 0CB6  51                       		push	cx 
 0CB7  52                       		push	dx 
 0CB8  8A D0                    		mov	dl, al 
 0CBA  8A F3                    		mov	dh, bl 
 0CBC  81 EA 0101               		sub	dx, 101h 
 0CC0  89 16 001E R             		mov	ds:var_64e, dx 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-50
                                                            

 0CC4  8A 3E 0009 R             		mov	bh, ds:var_639 
 0CC8  B4 02                    		mov	ah, 2 
 0CCA  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0CCC  B4 08                    		mov	ah, 8 
 0CCE  CD 10                    		int	10h		; - VIDEO - READ ATTRIBUTES/CHARACTE
				R AT CURSOR	POSITION 
                                					; BH = display page 
                                					; Return: AL = character 
                                					; AH = attribute of character (alpha modes
				) 
 0CD0  B7 00                    		mov	bh, 0 
 0CD2  8A DC                    		mov	bl, ah 
 0CD4  5A                       		pop	dx 
 0CD5  59                       		pop	cx 
 0CD6  58                       		pop	ax 
 0CD7  C3                       		ret 
                                SCRATR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0CD8                           SCRSTT		proc near 
 0CD8  E8 0B31 R                		call	SCRSAV 
 0CDB  8A 0F                    		mov	cl, [bx] 
 0CDD  80 F9 05                 		cmp	cl, 5 
 0CE0  73 16                    		jnb	short loc_5CD8 
 0CE2  43                       		inc	bx 
 0CE3  FE C1                    		inc	cl 
 0CE5  53                       		push	bx 
 0CE6  51                       		push	cx 
 0CE7  8A 16 000A R             		mov	dl, ds:var_63a 
 0CEB  E8 0E7A R                		call	sub_5E5A 
 0CEE  76 0B                    		jbe	short loc_5CDB 
 0CF0  8A D0                    		mov	dl, al 
 0CF2  3C 03                    		cmp	al, 3 
 0CF4  72 05                    		jb	short loc_5CDB 
 0CF6  58                       		pop	ax 
 0CF7  58                       		pop	ax 
 0CF8                           loc_5CD8: 
 0CF8  E9 0EFC R                		jmp	SCNERR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0CFB                           loc_5CDB: 
 0CFB  E8 0E7A R                		call	sub_5E5A 
 0CFE  E8 0E7A R                		call	sub_5E5A 
 0D01  76 03                    		jbe	short loc_5CE6 
 0D03  E8 0DAA R                		call	sub_5D8A 
 0D06                           loc_5CE6: 
 0D06  E8 0E7A R                		call	sub_5E5A 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-51
                                                            

 0D09  76 03                    		jbe	short loc_5CEE 
 0D0B  E8 0DAA R                		call	sub_5D8A 
 0D0E                           loc_5CEE: 
 0D0E  59                       		pop	cx 
 0D0F  5B                       		pop	bx 
 0D10  8A 2E 000F R             		mov	ch, ds:var_63f 
 0D14  E8 0E7A R                		call	sub_5E5A 
 0D17  76 4C                    		jbe	short loc_5D45 
 0D19  A2 000A R                		mov	ds:var_63a, al 
 0D1C  C6 06 0016 R 07          		mov	byte ptr ds:var_646, 7 
 0D21  C6 06 0015 R 07          		mov	byte ptr ds:var_645, 7 
 0D26  3C 00                    		cmp	al, 0 
 0D28  75 13                    		jnz	short loc_5D1D 
 0D2A  33 D2                    		xor	dx, dx 
 0D2C  89 16 001C R             		mov	word ptr ds:var_64c, dx 
 0D30  B5 02                    		mov	ch, 2 
 0D32  80 3E 000B R 50          		cmp	byte ptr ds:var_63b, 80 
 0D37  74 28                    		jz	short loc_5D41 
 0D39  B5 00                    		mov	ch, 0 
 0D3B  EB 24                    		jmp	short loc_5D41 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0D3D                           loc_5D1D: 
 0D3D  B5 04                    		mov	ch, 4 
 0D3F  C6 06 000B R 28          		mov	byte ptr ds:var_63b, 40 
 0D44  BA 0140                  		mov	dx, 320 
 0D47  C7 06 001C R 3F02        		mov	word ptr ds:var_64c, 3F02h 
 0D4D  3C 01                    		cmp	al, 1 
 0D4F  74 10                    		jz	short loc_5D41 
 0D51  B5 06                    		mov	ch, 6 
 0D53  C6 06 000B R 50          		mov	byte ptr ds:var_63b, 80 
 0D58  BA 0280                  		mov	dx, 640 
 0D5B  C7 06 001C R 7F01        		mov	word ptr ds:var_64c, 7F01h 
 0D61                           loc_5D41: 
 0D61  89 16 0019 R             		mov	ds:var_649, dx 
 0D65                           loc_5D45: 
 0D65  E8 0E7A R                		call	sub_5E5A 
 0D68  76 0F                    		jbe	short loc_5D59 
 0D6A  80 E5 FE                 		and	ch, 0FEh 
 0D6D  3C 00                    		cmp	al, 0 
 0D6F  74 08                    		jz	short loc_5D59 
 0D71  80 FD 06                 		cmp	ch, 6 
 0D74  73 03                    		jnb	short loc_5D59 
 0D76  80 CD 01                 		or	ch, 1 
 0D79                           loc_5D59: 
 0D79  8A C5                    		mov	al, ch 
 0D7B  3A 06 000F R             		cmp	al, ds:var_63f 
 0D7F  74 10                    		jz	short loc_5D71 
 0D81  B4 00                    		mov	ah, 0 
 0D83  CD 10                    		int	10h		; - VIDEO - SET	VIDEO MODE 
                                					; AL = mode 
 0D85  53                       		push	bx 
 0D86  51                       		push	cx 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-52
                                                            

 0D87  E8 072C R                		call	SCNRST 
 0D8A  59                       		pop	cx 
 0D8B  5B                       		pop	bx 
 0D8C  C6 06 0009 R 00          		mov	byte ptr ds:var_639, 0 
 0D91                           loc_5D71: 
 0D91  E8 0E7A R                		call	sub_5E5A 
 0D94  76 03                    		jbe	short loc_5D79 
 0D96  A2 0009 R                		mov	ds:var_639, al 
 0D99                           loc_5D79: 
 0D99  E8 0E7A R                		call	sub_5E5A 
 0D9C  74 02                    		jz	short loc_5D80 
 0D9E  73 03                    		jnb	short loc_5D83 
 0DA0                           loc_5D80: 
 0DA0  A0 0009 R                		mov	al, ds:var_639 
 0DA3                           loc_5D83: 
 0DA3  B4 05                    		mov	ah, 5 
 0DA5  CD 10                    		int	10h		; - VIDEO - SELECT DISPLAY PAGE 
                                					; AL = display page, 0-7  for modes 0 &	1,
				 0-3	for modes 2 & 3 
 0DA7  E9 0EF8 R                		jmp	SCNOK 
                                SCRSTT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0DAA                           sub_5D8A	proc near		; CODE XREF: SCRSTT+2Bp SC
				RSTT+33p 
                                 
                                ; FUNCTION CHUNK AT 5EDC SIZE 00000003 BYTES 
                                 
 0DAA  0A D2                    		or	dl, dl 
 0DAC  75 10                    		jnz	short loc_5D9E 
 0DAE  B4 04                    		mov	ah, 4 
 0DB0  80 3E 000B R 50          		cmp	byte ptr ds:var_63b, 80 
 0DB5  74 02                    		jz	short loc_5D99 
 0DB7  B4 08                    		mov	ah, 8 
                                 
 0DB9                           loc_5D99:				; CODE XREF: sub_5D8A+Bj 
 0DB9  3A C4                    		cmp	al, ah 
 0DBB  73 06                    		jnb	short loc_5DA3 
 0DBD  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0DBE                           loc_5D9E:				; CODE XREF: sub_5D8A+2j 
 0DBE  3C 00                    		cmp	al, 0 
 0DC0  75 01                    		jnz	short loc_5DA3 
 0DC2  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0DC3                           loc_5DA3:				; CODE XREF: sub_5D8A+11j sub_5D8
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-53
                                                            

				A+16j 
 0DC3  58                       		pop	ax 
 0DC4  58                       		pop	ax 
 0DC5  58                       		pop	ax 
 0DC6  E9 0EFC R                		jmp	SCNERR 
                                sub_5D8A	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0DC9                           SETCLR		proc near 
 0DC9  E8 0B31 R                		call	SCRSAV 
 0DCC  8A 0F                    		mov	cl, [bx] 
 0DCE  43                       		inc	bx 
 0DCF  FE C1                    		inc	cl 
 0DD1  8A 2E 0016 R             		mov	ch, ds:var_646 
 0DD5  A0 000A R                		mov	al, ds:var_63a 
 0DD8  3C 00                    		cmp	al, 0 
 0DDA  74 4C                    		jz	short loc_5E08 
 0DDC  3C 01                    		cmp	al, 1 
 0DDE  74 03                    		jz	short loc_5DC3 
 0DE0                           loc_5DC0: 
 0DE0  E9 0EFC R                		jmp	SCNERR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0DE3                           loc_5DC3: 
 0DE3  80 F9 06                 		cmp	cl, 6 
 0DE6  73 F8                    		jnb	short loc_5DC0 
 0DE8  E8 0E7A R                		call	sub_5E5A 
 0DEB  76 12                    		jbe	short loc_5DDF 
 0DED  53                       		push	bx 
 0DEE  3C 10                    		cmp	al, 10h 
 0DF0  72 04                    		jb	short loc_5DD6 
 0DF2  24 0F                    		and	al, 0Fh 
 0DF4  0C 10                    		or	al, 10h 
 0DF6                           loc_5DD6: 
 0DF6  8A D8                    		mov	bl, al 
 0DF8  B7 00                    		mov	bh, 0 
 0DFA  B4 0B                    		mov	ah, 0Bh 
 0DFC  CD 10                    		int	10h		; - VIDEO - SET	COLOR PALETTE 
                                					; BH = 00h, BL = border	color 
                                					; BH = 01h, BL = palette (0-3) 
 0DFE  5B                       		pop	bx 
 0DFF                           loc_5DDF: 
 0DFF  33 D2                    		xor	dx, dx 
 0E01  E8 0E7A R                		call	sub_5E5A 
 0E04  76 04                    		jbe	short loc_5DEA 
 0E06  8A D0                    		mov	dl, al 
 0E08  B6 01                    		mov	dh, 1 
 0E0A                           loc_5DEA: 
 0E0A  E8 0E7A R                		call	sub_5E5A 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-54
                                                            

 0E0D  76 04                    		jbe	short loc_5DF3 
 0E0F  8A D0                    		mov	dl, al 
 0E11  B6 01                    		mov	dh, 1 
 0E13                           loc_5DF3: 
 0E13  E8 0E7A R                		call	sub_5E5A 
 0E16  76 04                    		jbe	short loc_5DFC 
 0E18  8A D0                    		mov	dl, al 
 0E1A  B6 01                    		mov	dh, 1 
 0E1C                           loc_5DFC: 
 0E1C  0A F6                    		or	dh, dh 
 0E1E  74 4C                    		jz	short loc_5E4C 
 0E20  8A C2                    		mov	al, dl 
 0E22  24 01                    		and	al, 1 
 0E24  B7 01                    		mov	bh, 1 
 0E26  EB 3E                    		jmp	short loc_5E46 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0E28                           loc_5E08: 
 0E28  80 F9 05                 		cmp	cl, 5 
 0E2B  73 4A                    		jnb	short SETERR 
 0E2D  E8 0E7A R                		call	sub_5E5A 
 0E30  76 11                    		jbe	short loc_5E23 
 0E32  3C 20                    		cmp	al, 20h	; ' ' 
 0E34  73 41                    		jnb	short SETERR 
 0E36  A8 10                    		test	al, 10h 
 0E38  74 04                    		jz	short loc_5E1E 
 0E3A  24 0F                    		and	al, 0Fh 
 0E3C  0C 80                    		or	al, 80h 
 0E3E                           loc_5E1E: 
 0E3E  80 E5 70                 		and	ch, 70h 
 0E41  0A E8                    		or	ch, al 
 0E43                           loc_5E23: 
 0E43  E8 0E7A R                		call	sub_5E5A 
 0E46  76 13                    		jbe	short loc_5E3B 
 0E48  3C 10                    		cmp	al, 10h 
 0E4A  73 2B                    		jnb	short SETERR 
 0E4C  24 07                    		and	al, 7 
 0E4E  D0 E0                    		shl	al, 1 
 0E50  D0 E0                    		shl	al, 1 
 0E52  D0 E0                    		shl	al, 1 
 0E54  D0 E0                    		shl	al, 1 
 0E56  80 E5 8F                 		and	ch, 8Fh 
 0E59  0A E8                    		or	ch, al 
 0E5B                           loc_5E3B: 
 0E5B  E8 0E7A R                		call	sub_5E5A 
 0E5E  76 0C                    		jbe	short loc_5E4C 
 0E60  3C 10                    		cmp	al, 10h 
 0E62  73 13                    		jnb	short SETERR 
 0E64  B7 00                    		mov	bh, 0 
 0E66                           loc_5E46: 
 0E66  8A D8                    		mov	bl, al 
 0E68  B4 0B                    		mov	ah, 0Bh 
 0E6A  CD 10                    		int	10h		; - VIDEO - SET	COLOR PALETTE 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-55
                                                            

                                					; BH = 00h, BL = border	color 
                                					; BH = 01h, BL = palette (0-3) 
 0E6C                           loc_5E4C: 
 0E6C  88 2E 0016 R             		mov	ds:var_646, ch 
 0E70  88 2E 0015 R             		mov	ds:var_645, ch 
 0E74  E9 0EF8 R                		jmp	SCNOK 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0E77                           SETERR:					; CODE XREF: SETCLR+62j SETCLR+6B
				j ... 
 0E77  E9 0EFC R                		jmp	SCNERR 
                                SETCLR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0E7A                           sub_5E5A	proc near		; CODE XREF: SCRSTT+13p 
                                					; SCRSTT:loc_5CDBp ... 
 0E7A  FE C9                    		dec	cl 
 0E7C  74 09                    		jz	short loc_5E67 
 0E7E  8B 07                    		mov	ax, [bx] 
 0E80  43                       		inc	bx 
 0E81  43                       		inc	bx 
 0E82  0A C0                    		or	al, al 
 0E84  86 E0                    		xchg	ah, al 
 0E86  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0E87                           loc_5E67:				; CODE XREF: sub_5E5A+2j 
 0E87  FE C1                    		inc	cl 
 0E89  F9                       		stc 
 0E8A  C3                       		ret 
                                sub_5E5A	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Machine specific routine to set screen width 
                                ; Height in [AL], width	in [CL] 
                                 
 0E8B                           SWIDTH		proc near 
 0E8B  E8 0B31 R                		call	SCRSAV 
 0E8E  BB 0EFF R                		mov	bx, offset MODES40 
 0E91  3C 28                    		cmp	al, 40		; Is the mode 40 characters wide?
				 
 0E93  74 17                    		jz	short WIDE40 
 0E95  3C 50                    		cmp	al, 80		; Or is	it 80 wide? 
 0E97  BB 0F07 R                		mov	bx, offset MODES80 
 0E9A  75 DB                    		jnz	short SETERR	; If not 40 or 80 columns, e
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-56
                                                            

				rror 
 0E9C  A2 000B R                		mov	ds:var_63b, al 
 0E9F  BA 0280                  		mov	dx, 640 
 0EA2  B0 02                    		mov	al, 2 
 0EA4  C7 06 001C R 7F01        		mov	word ptr ds:var_64c, 7F01h 
 0EAA  EB 15                    		jmp	short loc_5EA1 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0EAC                           WIDE40:					; CODE XREF: SWIDTH+8j 
 0EAC  80 3E 000F R 07          		cmp	byte ptr ds:var_63f, 7 
 0EB1  74 45                    		jz	short SCNOK 
 0EB3  A2 000B R                		mov	ds:var_63b, al 
 0EB6  BA 0140                  		mov	dx, 320 
 0EB9  B0 01                    		mov	al, 1 
 0EBB  C7 06 001C R 3F02        		mov	word ptr ds:var_64c, 3F02h 
                                 
 0EC1                           loc_5EA1:				; CODE XREF: SWIDTH+1Fj 
 0EC1  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0EC6  74 07                    		jz	short loc_5EAF 
 0EC8  A2 000A R                		mov	ds:var_63a, al 
 0ECB  89 16 0019 R             		mov	ds:var_649, dx 
                                 
 0ECF                           loc_5EAF:				; CODE XREF: SWIDTH+3Bj 
 0ECF  A0 000F R                		mov	al, ds:var_63f 
 0ED2  B4 00                    		mov	ah, 0 
 0ED4  03 D8                    		add	bx, ax 
 0ED6  2E: 8A 07                		mov	al, cs:[bx] 
 0ED9  B4 00                    		mov	ah, 0 
 0EDB  3A 06 000F R             		cmp	al, ds:var_63f 
 0EDF  74 17                    		jz	short SCNOK 
 0EE1  CD 10                    		int	10h		; - VIDEO - SET	VIDEO MODE 
                                					; AL = mode 
 0EE3  E8 072C R                		call	SCNRST 
 0EE6  33 C0                    		xor	ax, ax 
 0EE8  A2 0009 R                		mov	ds:var_639, al 
 0EEB  80 3E 000A R 02          		cmp	byte ptr ds:var_63a, 2 
 0EF0  74 06                    		jz	short SCNOK 
 0EF2  B4 0B                    		mov	ah, 0Bh 
 0EF4  33 DB                    		xor	bx, bx 
 0EF6  CD 10                    		int	10h		; - VIDEO - SET	COLOR PALETTE 
                                					; BH = 00h, BL = border	color 
                                					; BH = 01h, BL = palette (0-3) 
                                 
 0EF8                           SCNOK:					; CODE XREF: CLRSCN+2Aj 
                                					; CSRDSP:loc_5BC6j ... 
 0EF8  F8                       		clc 
                                 
 0EF9                           GOSRST:					; CODE XREF: sub_5D8A+153j 
 0EF9  E9 0A58 R                		jmp	SCRRST 
                                SWIDTH		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-57
                                                            

                                ; START	OF FUNCTION CHUNK FOR sub_5D8A 
                                 
 0EFC                           SCNERR:					; CODE XREF: CSRATR:CSRERRj 
                                					; SCRSTT:loc_5CD8j ... 
 0EFC  F9                       		stc 
 0EFD  EB FA                    		jmp	short GOSRST 
                                ; END OF FUNCTION CHUNK	FOR sub_5D8A 
                                ; ---------------------------------------------
				------------------------------ 
                                 
                                PUBLIC  FKYFMT, FKYADV, STOREC, FETCHC 
                                PUBLIC  RIGHTC, LEFTC, UPC, DOWNC 
                                PUBLIC  SCALXY, MAPXYC, SETATR, READC, SETC, NS
				ETCX 
                                PUBLIC  GTASPC, PIXSIZ 
                                PUBLIC  TUPC, TDOWNC, PGINIT, NREAD, NWRITE 
                                PUBLIC  PNTINI, SCANR, SCANL 
                                 
 0EFF  00                       MODES40		db    0			; DATA XREF: SWIDTH+3o 
 0F00  01                       		db    1 
 0F01  00                       		db    0 
 0F02  01                       		db    1 
 0F03  04                       		db    4 
 0F04  05                       		db    5 
 0F05  05                       		db    5 
 0F06  07                       		db    7 
 0F07  02                       MODES80		db    2			; DATA XREF: SWIDTH+Co 
 0F08  03                       		db    3 
 0F09  02                       		db    2 
 0F0A  03                       		db    3 
 0F0B  06                       		db    6 
 0F0C  06                       		db    6 
 0F0D  06                       		db    6 
 0F0E  07                       		db    7 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F0F                           FKYFMT		proc near 
 0F0F  BB 0022 R                		mov	bx, offset var_652 
 0F12  80 3E 000B R 28          		cmp	byte ptr ds:var_63b, 40 ; 40 wide? 
 0F17  74 03                    		jz	short FKYFMX 
 0F19  BB 0025 R                		mov	bx, offset var_655 
 0F1C                           FKYFMX: 
 0F1C  C3                       		ret 
                                FKYFMT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F1D                           FKYADV		proc near 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-58
                                                            

 0F1D  0B E4                    		or	sp, sp 
 0F1F  C3                       		ret 
                                FKYADV		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F20                           STOREC		proc near 
 0F20  A2 001B R                		mov	ds:var_64b, al 
 0F23  89 1E 0017 R             		mov	ds:var_647, bx 
 0F27  C3                       		ret 
                                STOREC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F28                           FETCHC		proc near 
 0F28  A0 001B R                		mov	al, ds:var_64b 
 0F2B  8B 1E 0017 R             		mov	bx, ds:var_647 
 0F2F  C3                       		ret 
                                FETCHC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F30                           RIGHTC		proc near		; DATA XREF: DOGRPH+18o 
 0F30  51                       		push	cx 
 0F31  8A 0E 001C R             		mov	cl, ds:var_64c 
 0F35  D2 0E 001B R             		ror	byte ptr ds:var_64b, cl 
 0F39  72 04                    		jb	short RGHTCX 
 0F3B  FF 06 0017 R             		inc	word ptr ds:var_647 
 0F3F                           RGHTCX: 
 0F3F  59                       		pop	cx 
 0F40  C3                       		ret 
                                RIGHTC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F41                           LEFTC		proc near 
 0F41  51                       		push	cx 
 0F42  8A 0E 001C R             		mov	cl, ds:var_64c 
 0F46  D2 06 001B R             		rol	byte ptr ds:var_64b, cl 
 0F4A  72 04                    		jb	short LEFTCX 
 0F4C  FF 0E 0017 R             		dec	word ptr ds:var_647 
 0F50                           LEFTCX: 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-59
                                                            

 0F50  59                       		pop	cx 
 0F51  C3                       		ret 
                                LEFTC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; START	OF FUNCTION CHUNK FOR TUPC 
                                 
 0F52                           UPC: 
 0F52  B8 2000                  		mov	ax, 2000h 
 0F55  3B 06 0017 R             		cmp	ax, ds:var_647 
 0F59  76 08                    		jbe	short loc_5F43 
 0F5B  2D 0050                  		sub	ax, 80 
 0F5E  01 06 0017 R             		add	ds:var_647, ax 
 0F62  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0F63                           loc_5F43: 
 0F63  29 06 0017 R             		sub	ds:var_647, ax 
 0F67  C3                       		ret 
                                ; END OF FUNCTION CHUNK	FOR TUPC 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F68                           DOWNC		proc near 
 0F68  B8 2000                  		mov	ax, 2000h 
 0F6B  3B 06 0017 R             		cmp	ax, ds:var_647 
 0F6F  76 05                    		jbe	short DOWNCX 
 0F71  01 06 0017 R             		add	ds:var_647, ax 
 0F75  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0F76                           DOWNCX: 
 0F76  2D 0050                  		sub	ax, 80 
 0F79  29 06 0017 R             		sub	ds:var_647, ax 
 0F7D  C3                       		ret 
                                DOWNC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F7E                           SCALXY		proc near 
 0F7E  0A ED                    		or	ch, ch 
 0F80  78 1B                    		js	short loc_5F7D 
 0F82  8B 1E 0019 R             		mov	bx, ds:var_649 
 0F86  3B CB                    		cmp	cx, bx 
 0F88  9F                       		lahf 
 0F89  72 03                    		jb	short loc_5F6E 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-60
                                                            

 0F8B  8B CB                    		mov	cx, bx 
 0F8D  49                       		dec	cx 
                                 
 0F8E                           loc_5F6E:				; CODE XREF: SCALXY+Bj	SCALXY+22
				j 
 0F8E  0A F6                    		or	dh, dh 
 0F90  78 10                    		js	short loc_5F82 
 0F92  BB 00C8                  		mov	bx, 200 
 0F95  3B D3                    		cmp	dx, bx 
 0F97  72 0C                    		jb	short loc_5F85 
 0F99  8B D3                    		mov	dx, bx 
 0F9B  4A                       		dec	dx 
 0F9C  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0F9D                           loc_5F7D:				; CODE XREF: SCALXY+2j 
 0F9D  33 C9                    		xor	cx, cx 
 0F9F  9F                       		lahf 
 0FA0  EB EC                    		jmp	short loc_5F6E 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0FA2                           loc_5F82:				; CODE XREF: SCALXY+12j 
 0FA2  33 D2                    		xor	dx, dx 
 0FA4  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0FA5                           loc_5F85:				; CODE XREF: SCALXY+19j 
 0FA5  9E                       		sahf 
 0FA6  C3                       		ret 
                                SCALXY		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0FA7                           MAPXYC		proc near 
 0FA7  8B C1                    		mov	ax, cx 
 0FA9  8A 0E 000A R             		mov	cl, ds:var_63a 
 0FAD  FE C1                    		inc	cl 
 0FAF  D3 C8                    		ror	ax, cl 
 0FB1  50                       		push	ax 
 0FB2  D2 C4                    		rol	ah, cl 
 0FB4  8A EC                    		mov	ch, ah 
 0FB6  33 F6                    		xor	si, si 
 0FB8  8B C2                    		mov	ax, dx 
 0FBA  D1 E8                    		shr	ax, 1 
 0FBC  73 03                    		jnb	short loc_5FA1 
 0FBE  BE 2000                  		mov	si, 2000h 
 0FC1                           loc_5FA1: 
 0FC1  B1 50                    		mov	cl, 80 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-61
                                                            

 0FC3  F6 E1                    		mul	cl 
 0FC5  5A                       		pop	dx 
 0FC6  B6 00                    		mov	dh, 0 
 0FC8  03 C2                    		add	ax, dx 
 0FCA  03 F0                    		add	si, ax 
 0FCC  89 36 0017 R             		mov	ds:var_647, si 
 0FD0  8A 0E 001C R             		mov	cl, ds:var_64c 
 0FD4  FE C9                    		dec	cl 
 0FD6  D2 E5                    		shl	ch, cl 
 0FD8  8A CD                    		mov	cl, ch 
 0FDA  A0 001D R                		mov	al, ds:var_64d 
 0FDD  D2 C8                    		ror	al, cl 
 0FDF  A2 001B R                		mov	ds:var_64b, al 
 0FE2  C3                       		ret 
                                MAPXYC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0FE3                           SETATR		proc near 
 0FE3  3C 04                    		cmp	al, 4 
 0FE5  73 03                    		jnb	short STATRX 
 0FE7  A2 0030 R                		mov	ds:var_660, al 
 0FEA                           STATRX: 
 0FEA  F8                       		clc 
 0FEB  C3                       		ret 
                                SETATR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0FEC                           READC		proc near 
 0FEC  8B 36 0017 R             		mov	si, ds:var_647 
 0FF0  1E                       		push	ds 
 0FF1  B8 B800                  		mov	ax, 0B800h 
 0FF4  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0FF6  8A 04                    		mov	al, [si] 
 0FF8  1F                       		pop	ds 
                                		assume ds:nothing 
 0FF9  8A 26 001B R             		mov	ah, ds:var_64b 
 0FFD  F6 D4                    		not	ah 
 0FFF  22 C4                    		and	al, ah 
 1001  8A 0E 001C R             		mov	cl, ds:var_64c 
 1005                           RDCLOP: 
 1005  D3 C0                    		rol	ax, cl 
 1007  73 FC                    		jnb	short RDCLOP 
 1009  8A C4                    		mov	al, ah 
 100B  C3                       		ret 
                                READC		endp 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-62
                                                            

                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 100C                           SETC		proc near 
 100C  51                       		push	cx 
 100D  1E                       		push	ds 
 100E  E8 1018 R                		call	SETPTR 
 1011  20 2C                    		and	[si], ch 
 1013  08 04                    		or	[si], al 
 1015  1F                       		pop	ds 
 1016  59                       		pop	cx 
 1017  C3                       		ret 
                                SETC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set DS:SI to point at	current	"C" 
                                 
 1018                           SETPTR		proc near 
 1018  8A 26 001B R             		mov	ah, ds:var_64b 
 101C  8A EC                    		mov	ch, ah 
 101E  A0 0030 R                		mov	al, ds:var_660 
 1021  80 3E 000A R 01          		cmp	byte ptr ds:var_63a, 1 
 1026  74 02                    		jz	short loc_600A 
 1028  24 01                    		and	al, 1 
 102A                           loc_600A: 
 102A  8A 0E 001C R             		mov	cl, ds:var_64c 
 102E                           loc_600E: 
 102E  D2 C8                    		ror	al, cl 
 1030  D2 C4                    		rol	ah, cl 
 1032  72 FA                    		jb	short loc_600E 
 1034  BE B800                  		mov	si, 0B800h 
 1037  56                       		push	si 
 1038  8B 36 0017 R             		mov	si, ds:var_647 
 103C  1F                       		pop	ds 
 103D  C3                       		ret 
                                SETPTR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 103E                           NSETCX		proc near 
 103E  1E                       		push	ds 
 103F  E8 1018 R                		call	SETPTR 
 1042  F6 C5 80                 		test	ch, 80h 
 1045  74 0E                    		jz	short loc_6035 
 1047                           loc_6027: 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-63
                                                            

 1047  4B                       		dec	bx 
 1048  78 41                    		js	short loc_606B 
 104A  20 2C                    		and	[si], ch 
 104C  08 04                    		or	[si], al 
 104E  D2 C8                    		ror	al, cl 
 1050  D2 CD                    		ror	ch, cl 
 1052  72 F3                    		jb	short loc_6027 
 1054  46                       		inc	si 
 1055                           loc_6035: 
 1055  51                       		push	cx 
 1056  50                       		push	ax 
 1057  BA 0007                  		mov	dx, 7 
 105A  8A E0                    		mov	ah, al 
 105C                           loc_603C: 
 105C  D2 C8                    		ror	al, cl 
 105E  0A E0                    		or	ah, al 
 1060  4A                       		dec	dx 
 1061  75 F9                    		jnz	short loc_603C 
 1063  8A C4                    		mov	al, ah 
 1065  26: 8A 0E 000A R         		mov	cl, es:var_63a 
 106A  D3 CB                    		ror	bx, cl 
 106C  D1 CB                    		ror	bx, 1 
 106E  D1 CB                    		ror	bx, 1 
 1070  EB 04                    		jmp	short loc_6056 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1072                           loc_6052: 
 1072  89 04                    		mov	[si], ax 
 1074  46                       		inc	si 
 1075  46                       		inc	si 
 1076                           loc_6056: 
 1076  FE CB                    		dec	bl 
 1078  79 F8                    		jns	short loc_6052 
 107A  D0 E7                    		shl	bh, 1 
 107C  73 03                    		jnb	short loc_6061 
 107E  88 04                    		mov	[si], al 
 1080  46                       		inc	si 
 1081                           loc_6061: 
 1081  B3 00                    		mov	bl, 0 
 1083  D3 C3                    		rol	bx, cl 
 1085  D1 C3                    		rol	bx, 1 
 1087  58                       		pop	ax 
 1088  59                       		pop	cx 
 1089  EB BC                    		jmp	short loc_6027 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 108B                           loc_606B: 
 108B  1F                       		pop	ds 
 108C  C3                       		ret 
                                NSETCX		endp 
                                 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-64
                                                            

                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Get screen aspect ratio 
                                 
 108D                           GTASPC		proc near 
 108D  BB 00D5                  		mov	bx, 213		; FP number! 
 1090  BA 0133                  		mov	dx, 307 
 1093  80 3E 000A R 01          		cmp	byte ptr ds:var_63a, 1 
 1098  74 06                    		jz	short GTASPX 
 109A  BB 006B                  		mov	bx, 107		; FP number! 
 109D  BA 0267                  		mov	dx, 615 
 10A0                           GTASPX: 
 10A0  C3                       		ret 
                                GTASPC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10A1                           PIXSIZ		proc near 
 10A1  A0 001C R                		mov	al, ds:var_64c 
 10A4  C3                       		ret 
                                PIXSIZ		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10A5                           TUPC		proc near 
 10A5  83 3E 0017 R 4F          		cmp	word ptr ds:var_647, 4Fh 
 10AA  76 03                    		jbe	short TUPCX 
 10AC  E9 0F52 R                		jmp	UPC 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 10AF                           TUPCX: 
 10AF  F9                       		stc 
 10B0  C3                       		ret 
                                TUPC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10B1                           TDOWNC		proc near 
 10B1  81 3E 0017 R 3EF0        		cmp	word ptr ds:var_647, 3EF0h 
 10B7  73 F6                    		jnb	short TUPCX 
 10B9  E9 0F68 R                		jmp	DOWNC 
                                TDOWNC		endp 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-65
                                                            

                                ; ---------------------------------------------
				------------------------------ 
 10BC  11BF R                   PGDISP		dw offset FNOR		; DATA XREF: PGINIT+26
				o 
 10BE  11C2 R                   		dw offset FNAND 
 10C0  11C5 R                   		dw offset FNINV 
 10C2  11C7 R                   		dw offset FNSET 
 10C4  11CA R                   		dw offset FNXOR 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10C6                           PGINIT		proc near 
 10C6  9F                       		lahf 
 10C7  89 1E 0031 R             		mov	ds:var_661, bx 
 10CB  51                       		push	cx 
 10CC  D1 E9                    		shr	cx, 1 
 10CE  D1 E9                    		shr	cx, 1 
 10D0  D1 E9                    		shr	cx, 1 
 10D2  89 0E 0033 R             		mov	ds:var_663, cx 
 10D6  59                       		pop	cx 
 10D7  80 E1 07                 		and	cl, 7 
 10DA  B5 08                    		mov	ch, 8 
 10DC  2A E9                    		sub	ch, cl 
 10DE  80 E5 07                 		and	ch, 7 
 10E1  89 0E 0035 R             		mov	WORD PTR ds:var_665, cx 
 10E5  9E                       		sahf 
 10E6  73 13                    		jnb	short PGINIX 
 10E8  3C 05                    		cmp	al, 5 
 10EA  73 0F                    		jnb	short PGINIX 
 10EC  BB 10BC R                		mov	bx, offset PGDISP 
 10EF  B4 00                    		mov	ah, 0 
 10F1  D0 E0                    		shl	al, 1 
 10F3  03 D8                    		add	bx, ax 
 10F5  2E: 8B 07                		mov	ax, cs:[bx] 
 10F8  A3 0037 R                		mov	ds:var_667, ax 
                                 
 10FB                           PGINIX:					; CODE XREF: PGINIT+20j PGINIT+24
				j 
 10FB  C3                       		ret 
                                PGINIT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10FC                           NREAD		proc near 
 10FC  1E                       		push	ds 
 10FD  8B 3E 0031 R             		mov	di, ds:var_661 
 1101  8B 1E 0033 R             		mov	bx, ds:var_663 
 1105  E8 1018 R                		call	SETPTR 
 1108  8A 34                    		mov	dh, [si] 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-66
                                                            

 110A  B4 00                    		mov	ah, 0 
                                 
 110C                           loc_60EC:				; CODE XREF: NREAD+1Bj 
 110C  F6 C5 80                 		test	ch, 80h 
 110F  74 08                    		jz	short loc_60F9 
 1111  D2 C5                    		rol	ch, cl 
 1113  D2 E6                    		shl	dh, cl 
 1115  02 E1                    		add	ah, cl 
 1117  EB F3                    		jmp	short loc_60EC 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1119                           loc_60F9:				; CODE XREF: NREAD+13j 
 1119  8A CC                    		mov	cl, ah 
 111B  EB 06                    		jmp	short loc_6103 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 111D                           loc_60FD:				; CODE XREF: NREAD+32j 
 111D  26: 88 35                		mov	es:[di], dh 
 1120  47                       		inc	di 
 1121  8A F0                    		mov	dh, al 
                                 
 1123                           loc_6103:				; CODE XREF: NREAD+1Fj 
 1123  46                       		inc	si 
 1124  8A 04                    		mov	al, [si] 
 1126  8A E7                    		mov	ah, bh 
 1128  D3 E0                    		shl	ax, cl 
 112A  0A F4                    		or	dh, ah 
 112C  FE CB                    		dec	bl 
 112E  79 ED                    		jns	short loc_60FD 
 1130  26: 8A 0E 0036 R         		mov	cl, es:var_666 
 1135  0A C9                    		or	cl, cl 
 1137  74 08                    		jz	short NREADX 
 1139  D2 EE                    		shr	dh, cl 
 113B  D2 E6                    		shl	dh, cl 
 113D  26: 88 35                		mov	es:[di], dh 
 1140  47                       		inc	di 
                                 
 1141                           NREADX:					; CODE XREF: NREAD+3Bj 
 1141  1F                       		pop	ds 
 1142  89 3E 0031 R             		mov	ds:var_661, di 
 1146  C3                       		ret 
                                NREAD		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1147                           NWRITE		proc near 
 1147  1E                       		push	ds 
 1148  8B 3E 0031 R             		mov	di, ds:var_661 
 114C  8B 1E 0033 R             		mov	bx, ds:var_663 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-67
                                                            

 1150  E8 1018 R                		call	SETPTR 
 1153  8B 14                    		mov	dx, [si] 
 1155  B4 00                    		mov	ah, 0 
                                 
 1157                           loc_6137: 
 1157  F6 C5 80                 		test	ch, 80h 
 115A  74 08                    		jz	short loc_6144 
 115C  D2 C5                    		rol	ch, cl 
 115E  D3 C2                    		rol	dx, cl 
 1160  02 E1                    		add	ah, cl 
 1162  EB F3                    		jmp	short loc_6137 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1164                           loc_6144:				; CODE XREF: NWRITE+13j 
 1164  8A CC                    		mov	cl, ah 
 1166  EB 0B                    		jmp	short loc_6153 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1168                           loc_6148:				; CODE XREF: NWRITE+39j 
 1168  88 14                    		mov	[si], dl 
 116A  46                       		inc	si 
 116B  8A D6                    		mov	dl, dh 
 116D  46                       		inc	si 
 116E  8A 34                    		mov	dh, [si] 
 1170  4E                       		dec	si 
 1171  D3 C2                    		rol	dx, cl 
                                 
 1173                           loc_6153:				; CODE XREF: NWRITE+1Fj 
 1173  26: 8A 05                		mov	al, es:[di] 
 1176  47                       		inc	di 
 1177  26: FF 16 0037 R         		call	word ptr es:var_667 
 117C  D3 CA                    		ror	dx, cl 
 117E  FE CB                    		dec	bl 
 1180  79 E6                    		jns	short loc_6148 
 1182  26: 8A 1E 0035 R         		mov	bl, es:var_665 
 1187  0A DB                    		or	bl, bl 
 1189  75 07                    		jnz	short loc_6172 
 118B  4F                       		dec	di 
 118C  0A C9                    		or	cl, cl 
 118E  74 29                    		jz	short loc_6199 
 1190  EB 11                    		jmp	short loc_6183 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1192                           loc_6172:				; CODE XREF: NWRITE+42j 
 1192  02 CB                    		add	cl, bl 
 1194  80 F9 08                 		cmp	cl, 8 
 1197  72 0A                    		jb	short loc_6183 
 1199  88 14                    		mov	[si], dl 
 119B  74 1C                    		jz	short loc_6199 
 119D  46                       		inc	si 
 119E  8A D6                    		mov	dl, dh 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-68
                                                            

 11A0  80 E9 08                 		sub	cl, 8 
                                 
 11A3                           loc_6183:				; CODE XREF: NWRITE+49j NWRITE+50
				j 
 11A3  8A 04                    		mov	al, [si] 
 11A5  D2 E0                    		shl	al, cl 
 11A7  D2 E8                    		shr	al, cl 
 11A9  8A F0                    		mov	dh, al 
 11AB  B5 08                    		mov	ch, 8 
 11AD  2A E9                    		sub	ch, cl 
 11AF  8A CD                    		mov	cl, ch 
 11B1  D2 EA                    		shr	dl, cl 
 11B3  D2 E2                    		shl	dl, cl 
 11B5  0A F2                    		or	dh, dl 
 11B7  88 34                    		mov	[si], dh 
                                 
 11B9                           loc_6199:				; CODE XREF: NWRITE+47j NWRITE+54
				j 
 11B9  1F                       		pop	ds 
 11BA  89 3E 0031 R             		mov	ds:var_661, di 
 11BE  C3                       		ret 
                                NWRITE		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11BF                           FNOR: 
 11BF  0A D0                    		or	dl, al 
 11C1  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11C2                           FNAND: 
 11C2  22 D0                    		and	dl, al 
 11C4  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11C5                           FNINV: 
 11C5  34 FF                    		xor	al, 0FFh 
                                 
 11C7                           FNSET: 
 11C7  8A D0                    		mov	dl, al 
 11C9  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11CA                           FNXOR: 
 11CA  32 D0                    		xor	dl, al 
 11CC  C3                       		ret 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-69
                                                            

                                 
 11CD                           PNTINI		proc near 
 11CD  3C 04                    		cmp	al, 4 
 11CF  72 02                    		jb	short PNTINX 
 11D1  B0 00                    		mov	al, 0 
 11D3                           PNTINX: 
 11D3  A2 0039 R                		mov	ds:var_669, al 
 11D6  F8                       		clc 
 11D7  C3                       		ret 
                                PNTINI		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 11D8                           SCANR		proc near		; CODE XREF: SCANR1p 
 11D8  1E                       		push	ds 
 11D9  8B FA                    		mov	di, dx 
 11DB  E8 1018 R                		call	SETPTR 
 11DE  E8 1282 R                		call	sub_6262 
 11E1  2A DC                    		sub	bl, ah 
 11E3  8A D3                    		mov	dl, bl 
 11E5  8A 24                    		mov	ah, [si] 
 11E7  51                       		push	cx 
                                 
 11E8                           loc_61C8:				; CODE XREF: SCANR+14j 
 11E8  D2 CC                    		ror	ah, cl 
 11EA  D2 CD                    		ror	ch, cl 
 11EC  72 FA                    		jb	short loc_61C8 
 11EE  59                       		pop	cx 
 11EF  B3 00                    		mov	bl, 0 
 11F1  26: 8A 3E 0039 R         		mov	bh, es:var_669 
 11F6  26: 80 3E 000A R 01      		cmp	byte ptr es:var_63a, 1 
 11FC  74 03                    		jz	short loc_61E1 
 11FE  80 E7 01                 		and	bh, 1 
                                 
 1201                           loc_61E1:				; CODE XREF: SCANR+24j	SCANR+36j
				 ... 
 1201  8A C3                    		mov	al, bl 
 1203  D3 C0                    		rol	ax, cl 
 1205  3A C7                    		cmp	al, bh 
 1207  75 16                    		jnz	short loc_61FF 
 1209  4F                       		dec	di 
 120A  74 0B                    		jz	short loc_61F7 
 120C  D2 CD                    		ror	ch, cl 
 120E  72 F1                    		jb	short loc_61E1 
 1210  46                       		inc	si 
 1211  8A 24                    		mov	ah, [si] 
 1213  FE CA                    		dec	dl 
 1215  75 EA                    		jnz	short loc_61E1 
                                 
 1217                           loc_61F7:				; CODE XREF: SCANR+32j 
 1217  33 DB                    		xor	bx, bx 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-70
                                                            

 1219  8B D3                    		mov	dx, bx 
 121B  8A CA                    		mov	cl, dl 
 121D  1F                       		pop	ds 
 121E  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 121F                           loc_61FF:				; CODE XREF: SCANR+2Fj 
 121F  26: 89 36 0000 E         		mov	es:CSAVEA, si 
 1224  26: 88 2E 0000 E         		mov	BYTE PTR es:CSAVEM, ch 
 1229  57                       		push	di 
 122A  26: 8A 36 0030 R         		mov	dh, es:var_660 
 122F  8A DE                    		mov	bl, dh 
 1231  51                       		push	cx 
 1232  26: 80 3E 000A R 01      		cmp	byte ptr es:var_63a, 1 
 1238  74 09                    		jz	short loc_6223 
 123A  80 E6 01                 		and	dh, 1 
 123D  8A DE                    		mov	bl, dh 
 123F  EB 02                    		jmp	short loc_6223 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1241                           loc_6221:				; CODE XREF: SCANR+6Dj 
 1241  D2 C6                    		rol	dh, cl 
                                 
 1243                           loc_6223:				; CODE XREF: SCANR+60j	SCANR+67j
				 
 1243  D2 CD                    		ror	ch, cl 
 1245  72 FA                    		jb	short loc_6221 
 1247  59                       		pop	cx 
 1248  33 FF                    		xor	di, di 
 124A  EB 08                    		jmp	short loc_6234 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 124C                           loc_622C:				; CODE XREF: SCANR+8Bj	SCANR+92j
				 
 124C  B0 00                    		mov	al, 0 
 124E  D3 C0                    		rol	ax, cl 
 1250  3A C7                    		cmp	al, bh 
 1252  74 1B                    		jz	short loc_624F 
                                 
 1254                           loc_6234:				; CODE XREF: SCANR+72j 
 1254  3A C3                    		cmp	al, bl 
 1256  74 06                    		jz	short loc_623E 
 1258  20 2C                    		and	[si], ch 
 125A  08 34                    		or	[si], dh 
 125C  B3 FF                    		mov	bl, 0FFh 
                                 
 125E                           loc_623E:				; CODE XREF: SCANR+7Ej 
 125E  47                       		inc	di 
 125F  D2 CE                    		ror	dh, cl 
 1261  D2 CD                    		ror	ch, cl 
 1263  72 E7                    		jb	short loc_622C 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-71
                                                            

 1265  46                       		inc	si 
 1266  8A 24                    		mov	ah, [si] 
 1268  FE CA                    		dec	dl 
 126A  75 E0                    		jnz	short loc_622C 
 126C  D2 C5                    		rol	ch, cl 
 126E  4E                       		dec	si 
                                 
 126F                           loc_624F:				; CODE XREF: SCANR+7Aj 
 126F  5A                       		pop	dx 
 1270  FE C3                    		inc	bl 
 1272  74 02                    		jz	short loc_6256 
 1274  B1 00                    		mov	cl, 0 
                                 
 1276                           loc_6256:				; CODE XREF: SCANR+9Aj 
 1276  8B DF                    		mov	bx, di 
 1278  1F                       		pop	ds 
 1279  89 36 0017 R             		mov	ds:var_647, si 
 127D  88 2E 001B R             		mov	ds:var_64b, ch 
 1281  C3                       		ret 
                                SCANR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1282                           sub_6262	proc near 
 1282  8B C6                    		mov	ax, si 
 1284  BB 2000                  		mov	bx, 2000h 
 1287  3B C3                    		cmp	ax, bx 
 1289  72 02                    		jb	short loc_626D 
 128B  2B C3                    		sub	ax, bx 
 128D                           loc_626D: 
 128D  B3 50                    		mov	bl, 80 
 128F  F6 F3                    		div	bl 
 1291  C3                       		ret 
                                sub_6262	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1292                           SCANL		proc near 
 1292  1E                       		push	ds 
 1293  E8 1018 R                		call	SETPTR 
 1296  8A F0                    		mov	dh, al 
 1298  E8 1282 R                		call	sub_6262 
 129B  8A D4                    		mov	dl, ah 
 129D  8A 24                    		mov	ah, [si] 
 129F  51                       		push	cx 
 12A0                           loc_6280: 
 12A0  D2 CC                    		ror	ah, cl 
 12A2  D2 CD                    		ror	ch, cl 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-72
                                                            

 12A4  72 FA                    		jb	short loc_6280 
 12A6  59                       		pop	cx 
 12A7  26: 8A 1E 0030 R         		mov	bl, es:var_660 
 12AC  26: 8A 3E 0039 R         		mov	bh, es:var_669 
 12B1  26: 80 3E 000A R 01      		cmp	byte ptr es:var_63a, 1 
 12B7  74 04                    		jz	short loc_629D 
 12B9  81 E3 0101               		and	bx, 101h 
 12BD                           loc_629D: 
 12BD  D2 CF                    		ror	bh, cl 
 12BF  D2 CB                    		ror	bl, cl 
 12C1  33 FF                    		xor	di, di 
 12C3  EB 13                    		jmp	short loc_62B8 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 12C5                           loc_62A5: 
 12C5  B0 00                    		mov	al, 0 
 12C7  D3 C8                    		ror	ax, cl 
 12C9  3A C7                    		cmp	al, bh 
 12CB  74 18                    		jz	short loc_62C5 
 12CD  3A C3                    		cmp	al, bl 
 12CF  74 06                    		jz	short loc_62B7 
 12D1  20 2C                    		and	[si], ch 
 12D3  08 34                    		or	[si], dh 
 12D5  B3 FF                    		mov	bl, -1 
 12D7                           loc_62B7: 
 12D7  47                       		inc	di 
 12D8                           loc_62B8: 
 12D8  D2 C6                    		rol	dh, cl 
 12DA  D2 C5                    		rol	ch, cl 
 12DC  72 E7                    		jb	short loc_62A5 
 12DE  4E                       		dec	si 
 12DF  8A 24                    		mov	ah, [si] 
 12E1  FE CA                    		dec	dl 
 12E3  79 E0                    		jns	short loc_62A5 
 12E5                           loc_62C5: 
 12E5  8A C3                    		mov	al, bl 
 12E7  8B DF                    		mov	bx, di 
 12E9  0B DB                    		or	bx, bx 
 12EB  75 04                    		jnz	short loc_62D1 
 12ED  B1 00                    		mov	cl, 0 
 12EF  1F                       		pop	ds 
 12F0  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 12F1                           loc_62D1: 
 12F1  D2 CD                    		ror	ch, cl 
 12F3  72 01                    		jb	short loc_62D6 
 12F5  46                       		inc	si 
 12F6                           loc_62D6: 
 12F6  FE C0                    		inc	al 
 12F8  74 02                    		jz	short loc_62DC 
 12FA  B1 00                    		mov	cl, 0 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-73
                                                            

 12FC                           loc_62DC: 
 12FC  1F                       		pop	ds 
 12FD  88 2E 001B R             		mov	ds:var_64b, ch 
 1301  89 36 0017 R             		mov	ds:var_647, si 
 1305  C3                       		ret 
                                SCANL		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 10h 
                                 
                                PUBLIC  RDPEN, RDTRIG, RDSTIK, POLLEV 
                                 
 1306  00                       ISREVT		db 0			; DATA XREF: CM2ISR:loc_5262w 
                                					; TIMISR+1Aw ... 
 1307  0000                     LPWSDN		dw 0			; DATA XREF: LPENQR+35w RDPEN+C
				o ... 
 1309  0000                     LPLGX		dw 0			; DATA XREF: LPENQR+38w 
 130B  0000                     LPLGY		dw 0			; DATA XREF: LPENQR+3Cw 
 130D  0000                     LPDOWN		dw 0			; DATA XREF: LPENQR+23r LPENQR+
				32w ... 
                                					; -1 if	currently down,	0 if up 
 130F  0000                     LPGX		dw 0			; DATA XREF: LPENQR+Fw 
 1311  0000                     LPGY		dw 0			; DATA XREF: LPENQR+1Fw 
 1313  0001                     LPROW		dw 1			; DATA XREF: LPENQR+40w 
 1315  0001                     LPCOL		dw 1			; DATA XREF: LPENQR+44w 
 1317  0001                     LPLROW		dw 1			; DATA XREF: LPENQR+15w 
 1319  0001                     LPLCOL		dw 1			; DATA XREF: LPENQR+1Bw 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 131B                           LPENQR		proc near 
 131B  1E                       		push	ds 
 131C  0E                       		push	cs 
 131D  1F                       		pop	ds 
                                		assume ds:CSEG 
 131E  50                       		push	ax 
 131F  53                       		push	bx 
 1320  51                       		push	cx 
 1321  52                       		push	dx 
 1322  B4 04                    		mov	ah, 4 
 1324  CD 10                    		int	10h		; - VIDEO - READ LIGHT PEN POSITION 
				(all but PS) 
                                					; Return: AH = 00h light pen switch not	ac
				tivated 
                                					; AH = 01h light pen values in registers 
                                					; DH,DL	= row,columnCH = raster	line (0-19
				9) (EGA) old graphics	modes 
                                					; CX = (EGA) raster line 
                                					; BX = pixel column 
 1326  0A E4                    		or	ah, ah 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-74
                                                            

 1328  74 3F                    		jz	short NOSWIT 
 132A  89 1E 130F R             		mov	LPGX, bx 
 132E  FE C6                    		inc	dh 
 1330  88 36 1317 R             		mov	byte ptr LPLROW, dh 
 1334  FE C2                    		inc	dl 
 1336  88 16 1319 R             		mov	byte ptr LPLCOL, dl 
 133A  88 2E 1311 R             		mov	byte ptr LPGY, ch 
 133E  83 3E 130D R FF          		cmp	LPDOWN,	-1 
 1343  74 1E                    		jz	short LPENQX 
 1345  C6 06 1306 R 01          		mov	ISREVT,	1 
 134A  B8 FFFF                  		mov	ax, -1 
 134D  A3 130D R                		mov	LPDOWN,	ax 
 1350  A3 1307 R                		mov	LPWSDN,	ax 
 1353  89 1E 1309 R             		mov	LPLGX, bx 
 1357  88 2E 130B R             		mov	byte ptr LPLGY,	ch 
 135B  88 36 1313 R             		mov	byte ptr LPROW,	dh 
 135F  88 16 1315 R             		mov	byte ptr LPCOL,	dl 
 1363                           LPENQX: 
 1363  5A                       		pop	dx 
 1364  59                       		pop	cx 
 1365  5B                       		pop	bx 
 1366  58                       		pop	ax 
 1367  1F                       		pop	ds 
                                		assume ds:nothing 
 1368  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1369                           NOSWIT: 
 1369  C7 06 130D R 0000        		mov	ds:LPDOWN, 0 
 136F  EB F2                    		jmp	short LPENQX 
                                LPENQR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Light	pen control via	[AL] 
                                ;  -2: Pen ON 
                                ;  -1: Pen OFF 
                                ;   0: Return -1 if pen	was down since last pol
				l, else 0. 
                                ;   1: Return X	Graphics Coordinate where pen w
				as last activated. 
                                ;   2: Return Y	Graphics Coordinate where pen w
				as last activated. 
                                ;   3: Return -1 if pen	is currently down, 0 if
					currently up. 
                                ;   4: Return last known valid X Graphics Coord
				inate. 
                                ;   5: Return last known valid Y Graphics Coord
				inate. 
                                ;   6: Return character	row where pen was last 
				activated. 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-75
                                                            

                                ;   7: Return character	column where pen was la
				st activated. 
                                ;   8: Return last known character row. 
                                ;   9: Return last known character column. 
                                 
 1371                           RDPEN		proc near 
 1371  1E                       		push	ds 
 1372  0E                       		push	cs 
 1373  1F                       		pop	ds 
                                		assume ds:CSEG 
 1374  0A C0                    		or	al, al 
 1376  78 17                    		js	short LPNOFF 
 1378  56                       		push	si 
 1379  D0 E0                    		shl	al, 1 
 137B  B4 00                    		mov	ah, 0 
 137D  BE 1307 R                		mov	si, offset LPWSDN 
 1380  03 F0                    		add	si, ax 
 1382  2E: 8B 1C                		mov	bx, cs:[si] 
 1385  0B C0                    		or	ax, ax 
 1387  75 03                    		jnz	short RDPENX 
 1389  A3 1307 R                		mov	LPWSDN,	ax	; Not down since last poll 
 138C                           RDPENX: 
 138C  5E                       		pop	si 
 138D  1F                       		pop	ds 
                                		assume ds:nothing 
 138E  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 138F                           LPNOFF: 
 138F  3C FE                    		cmp	al, -2		; Or should it be ON? 
 1391  74 07                    		jz	short LPNON 
 1393  80 26 0700 R FE          		and	ds:EVTSET, 0FEh	; Disable light	pen readi
				ng 
 1398  1F                       		pop	ds 
 1399  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 139A                           LPNON: 
 139A  80 0E 0700 R 01          		or	ds:EVTSET, 1	; Enable light pen reading 
 139F  33 C0                    		xor	ax, ax 
 13A1  A3 130D R                		mov	ds:LPDOWN, ax 
 13A4  A3 1307 R                		mov	ds:LPWSDN, ax	; Not down since last poll 
 13A7  1F                       		pop	ds 
 13A8  C3                       		ret 
                                RDPEN		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 13A9                           RDTRIG		proc near 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-76
                                                            

 13A9  52                       		push	dx 
 13AA  51                       		push	cx 
 13AB  33 C9                    		xor	cx, cx 
 13AD  8A C8                    		mov	cl, al 
 13AF  3C 01                    		cmp	al, 1 
 13B1  75 02                    		jnz	short loc_639F 
 13B3  B1 02                    		mov	cl, 2 
 13B5                           loc_639F: 
 13B5  3C 02                    		cmp	al, 2 
 13B7  75 02                    		jnz	short loc_63A5 
 13B9  B1 01                    		mov	cl, 1 
 13BB                           loc_63A5: 
 13BB  80 C1 04                 		add	cl, 4 
 13BE  BA 0201                  		mov	dx, 201h 
 13C1  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 13C2  F6 D0                    		not	al 
 13C4  D2 C8                    		ror	al, cl 
 13C6  24 01                    		and	al, 1 
 13C8  0A E4                    		or	ah, ah 
 13CA  74 16                    		jz	short RDTRGX 
 13CC  FB                       		sti 
 13CD  2E: A0 0701 R            		mov	al, cs:LSTRIG 
 13D1  D2 C8                    		ror	al, cl 
 13D3  8A E8                    		mov	ch, al 
 13D5  24 FE                    		and	al, 0FEh 
 13D7  D2 C0                    		rol	al, cl 
 13D9  2E: A2 0701 R            		mov	cs:LSTRIG, al 
 13DD  8A C5                    		mov	al, ch 
 13DF  24 01                    		and	al, 1 
 13E1  FA                       		cli 
 13E2                           RDTRGX: 
 13E2  59                       		pop	cx 
 13E3  5A                       		pop	dx 
 13E4  C3                       		ret 
                                RDTRIG		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 13E5                           RDSTIK		proc near 
 13E5  50                       		push	ax 
 13E6  51                       		push	cx 
 13E7  52                       		push	dx 
 13E8  3C 04                    		cmp	al, 4 
 13EA  F5                       		cmc 
 13EB  72 1D                    		jb	short RDSTKX 
 13ED  8A C8                    		mov	cl, al 
 13EF  B0 01                    		mov	al, 1 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-77
                                                            

 13F1  D2 E0                    		shl	al, cl 
 13F3  8A C8                    		mov	cl, al 
 13F5  33 DB                    		xor	bx, bx 
 13F7  BA 0201                  		mov	dx, 201h 
 13FA  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 13FB  22 C1                    		and	al, cl 
 13FD  75 0B                    		jnz	short RDSTKX 
 13FF  4B                       		dec	bx 
 1400  4B                       		dec	bx 
 1401  FA                       		cli 
 1402  EE                       		out	dx, al		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 1403                           RDSTLP: 
 1403  43                       		inc	bx 
 1404  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 1405  22 C1                    		and	al, cl 
 1407  75 FA                    		jnz	short RDSTLP 
 1409  FB                       		sti 
 140A                           RDSTKX: 
 140A  5A                       		pop	dx 
 140B  59                       		pop	cx 
 140C  58                       		pop	ax 
 140D  C3                       		ret 
                                RDSTIK		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 140E                           POLLEV		proc near		; CODE XREF: CHKINT+7p 
 140E  FC                       		cld 
 140F  FA                       		cli 
 1410  2E: 80 3E 1306 R 00      		cmp	cs:ISREVT, 0	; Light	pen event? 
 1416  2E: C6 06 1306 R 00      		mov	cs:ISREVT, 0 
 141C  FB                       		sti 
 141D  75 0D                    		jnz	short POLEVX 
 141F  1E                       		push	ds 
 1420  33 C0                    		xor	ax, ax 
 1422  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 1424  A1 041A                  		mov	ax, ds:41Ah	; Next keyboard	buffer item 
 1427  3B 06 041C               		cmp	ax, ds:41Ch	; Last keyboard	buffer item 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-78
                                                            

 142B  1F                       		pop	ds 
                                		assume ds:nothing 
                                 
 142C                           POLEVX:					; CODE XREF: POLLEV+Fj 
 142C  C3                       		ret 
                                POLLEV		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 10h 
                                 
                                PUBLIC  DONOTE 
                                 
 142D  0084[                    NTARRY		db 84h dup(   0)	; DATA XREF: TMRISR:lo
				c_6518o 
            00                  
                         ]      
                                
                                					; DONOTE+6Bo 
 14B1  0000                     CURNOT		dw 0			; DATA XREF: TMRISR+2Fr TMRISR+
				48r ... 
 14B3  0000                     NOTPTR		dw 0			; DATA XREF: TMRISR+33r TMRISR+
				4Cr ... 
 14B5  00                       		db    0 
 14B6  00                       		db    0 
 14B7  00                       byte_64AA	db 0			; DATA XREF: TMRISR+28r TMRIS
				R+42w ... 
 14B8  0000                     word_64AB	dw 0			; DATA XREF: TMRISR+21r 
                                					; TMRISR:loc_64EFw ... 
 14BA  00                       byte_64AD	db 0			; DATA XREF: TMRISR+1Cw TMRIS
				R+CBw 
 14BB  00                       ISRCNT		db 0			; DATA XREF: TMRISR:loc_6564w 
                                					; TMRISR:TMRRSTw ... 
                                					; Timer	ISR entry counter. Because the tim
				er ticks 
                                					; faster, only chain to	the previous handl
				er when 
                                					; the counter goes to zero. 
 14BC  00 00 00 00              OLDTMI		dd 0			; DATA XREF: TMRISR+D7r TMRISR+
				F2r ... 
                                					; Previous timer interrupt vector 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 14C0                           TMRISR		proc far		; DATA XREF: DONOTE+A4o 
 14C0  50                       		push	ax 
 14C1  53                       		push	bx 
 14C2  52                       		push	dx 
 14C3  56                       		push	si 
 14C4  1E                       		push	ds 
 14C5  0E                       		push	cs 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-79
                                                            

 14C6  1F                       		pop	ds 
                                		assume ds:CSEG 
 14C7  F6 06 0700 R 02          		test	EVTSET,	2	; Speaker on? 
 14CC  75 06                    		jnz	short TMRIS1	; If not, turn it off now 
 14CE  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 14D0  24 FD                    		and	al, 0FDh 
 14D2  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
                                 
 14D4                           TMRIS1:					; CODE XREF: TMRISR+Cj 
 14D4  FB                       		sti 
 14D5  F6 06 0700 R 02          		test	EVTSET,	2	; Speaker on? 
 14DA  74 1D                    		jz	short loc_64EC 
 14DC  C6 06 14BA R 02          		mov	byte_64AD, 2 
 14E1  83 3E 14B8 R 00          		cmp	word_64AB, 0 
 14E6  75 14                    		jnz	short loc_64EF 
 14E8  80 3E 14B7 R 00          		cmp	byte_64AA, 0 
 14ED  75 0D                    		jnz	short loc_64EF 
 14EF  8B 36 14B1 R             		mov	si, CURNOT 
 14F3  3B 36 14B3 R             		cmp	si, NOTPTR 
 14F7  75 28                    		jnz	short loc_6514 
                                 
 14F9                           loc_64EC:				; CODE XREF: TMRISR+1Aj 
 14F9  EB 76                    		jmp	short loc_6564 
                                ; ---------------------------------------------
				------------------------------ 
 14FB  90                       		nop 
                                 
 14FC                           loc_64EF:				; CODE XREF: TMRISR+26j TMRISR+2D
				j 
 14FC  FF 0E 14B8 R             		dec	word_64AB 
 1500  75 6F                    		jnz	short loc_6564 
 1502  FE 0E 14B7 R             		dec	byte_64AA 
 1506  79 69                    		jns	short loc_6564 
 1508  8B 36 14B1 R             		mov	si, CURNOT 
 150C  3B 36 14B3 R             		cmp	si, NOTPTR 
 1510  75 13                    		jnz	short loc_6518 
 1512  80 26 0700 R FD          		and	EVTSET,	0FDh	; Clear	speaker	event bit 
 1517  FA                       		cli 
 1518  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-80
                                                            

                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 151A  24 FD                    		and	al, 0FDh 
 151C  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 151E  FB                       		sti 
 151F  EB 50                    		jmp	short loc_6564 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1521                           loc_6514:				; CODE XREF: TMRISR+37j 
 1521  B0 B6                    		mov	al, 0B6h 
 1523  E6 43                    		out	43h, al		; Timer	8253-5 (AT: 8254.2). 
                                 
 1525                           loc_6518:				; CODE XREF: TMRISR+50j 
 1525  BB 142D R                		mov	bx, offset NTARRY 
 1528  8B 00                    		mov	ax, [bx+si] 
 152A  0B C0                    		or	ax, ax 
 152C  75 07                    		jnz	short loc_6528 
 152E  FA                       		cli 
 152F  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 1531  24 FD                    		and	al, 0FDh 
 1533  EB 0B                    		jmp	short loc_6533 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1535                           loc_6528:				; CODE XREF: TMRISR+6Cj 
 1535  E6 42                    		out	42h, al		; Timer	8253-5 (AT: 8254.2). 
 1537  8A C4                    		mov	al, ah 
 1539  E6 42                    		out	42h, al		; Timer	8253-5 (AT: 8254.2). 
 153B  FA                       		cli 
 153C  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-81
                                                            

                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 153E  0C 03                    		or	al, 3 
                                 
 1540                           loc_6533:				; CODE XREF: TMRISR+73j 
 1540  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 1542  FB                       		sti 
 1543  46                       		inc	si 
 1544  46                       		inc	si 
 1545  8B 00                    		mov	ax, [bx+si] 
 1547  46                       		inc	si 
 1548  46                       		inc	si 
 1549  E8 16C6 R                		call	NXTNOT 
 154C  89 36 14B1 R             		mov	CURNOT,	si 
 1550  BB 1746                  		mov	bx, 5958 
 1553  F7 E3                    		mul	bx 
 1555  B3 00                    		mov	bl, 0 
 1557  D1 E0                    		shl	ax, 1 
 1559  D1 D2                    		rcl	dx, 1 
 155B  D1 E0                    		shl	ax, 1 
 155D  D1 D2                    		rcl	dx, 1 
 155F  D1 E0                    		shl	ax, 1 
 1561  D1 D2                    		rcl	dx, 1 
 1563  D1 E0                    		shl	ax, 1 
 1565  D1 D2                    		rcl	dx, 1 
 1567  D1 D3                    		rcl	bx, 1 
 1569  88 1E 14B7 R             		mov	byte_64AA, bl 
 156D  89 16 14B8 R             		mov	word_64AB, dx 
                                 
 1571                           loc_6564:				; CODE XREF: TMRISR:loc_64ECj 
                                					; TMRISR+40j ... 
 1571  FE 0E 14BB R             		dec	ISRCNT 
 1575  79 0B                    		jns	short CHKSTP 
 1577  B8 0800                  		mov	ax, 2048	; 65536/32 
 157A  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 157C  8A C4                    		mov	al, ah 
 157E  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 1580  EB 26                    		jmp	short TMRRST 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1582                           CHKSTP:					; CODE XREF: TMRISR+B5j 
 1582  75 33                    		jnz	short TMRISX 
 1584  F6 06 0700 R 02          		test	EVTSET,	2	; Speaker still	on? 
 1589  75 1D                    		jnz	short TMRRST	; If so, keep going. 
 158B  FE 0E 14BA R             		dec	byte_64AD 
 158F  75 17                    		jnz	short TMRRST 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-82
                                                            

 1591  33 C0                    		xor	ax, ax		; Reset	timer interval to normal 
 1593  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 1595  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 1597  C5 16 14BC R             		lds	dx, OLDTMI	; Restore old interrupt	vector
				 
                                		assume ds:nothing 
 159B  1E                       		push	ds 
 159C  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 159E  89 16 0020               		mov	ds:20h,	dx 
 15A2  58                       		pop	ax 
 15A3  A3 0022                  		mov	ds:22h,	ax 
 15A6  EB 05                    		jmp	short TMRCHN 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 15A8                           TMRRST:					; CODE XREF: TMRISR+C0j TMRISR+C9
				j ... 
 15A8  C6 06 14BB R 20          		mov	ds:ISRCNT, 32	; Timer	ticks 32x faster; r
				estart period. 
                                 
 15AD                           TMRCHN:					; CODE XREF: TMRISR+E6j 
 15AD  1F                       		pop	ds 
                                		assume ds:nothing 
 15AE  5E                       		pop	si 
 15AF  5A                       		pop	dx 
 15B0  5B                       		pop	bx 
 15B1  58                       		pop	ax 
 15B2  2E: FF 2E 14BC R         		jmp	cs:OLDTMI	; Chain	to previous timer ISR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 15B7                           TMRISX:					; CODE XREF: TMRISR:CHKSTPj 
 15B7  1F                       		pop	ds 
 15B8  5E                       		pop	si 
 15B9  5A                       		pop	dx 
 15BA  5B                       		pop	bx 
 15BB  B0 20                    		mov	al, 20h		; Send EOI 
 15BD  E6 20                    		out	20h, al		; Interrupt controller,	8259A. 
 15BF  58                       		pop	ax 
 15C0  CF                       		iret 
                                TMRISR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Queues note for execution, saves all regs. 
                                ; On entry: 
                                ;   AL = voice (0=foreground, 1=back, -1=off) 
                                ;   CX = frequency 
                                ;   DX = duration (1=18.7ms) 
                                ; 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-83
                                                            

 15C1                           DONOTE		proc near		; CODE XREF: GWTERM+12p SND
				RST+7p ... 
 15C1  1E                       		push	ds 
 15C2  53                       		push	bx 
 15C3  56                       		push	si 
 15C4  0E                       		push	cs 
 15C5  1F                       		pop	ds 
                                		assume ds:CSEG 
 15C6  3C FF                    		cmp	al, -1		; Note off? 
 15C8  75 21                    		jnz	short DOPLAY 
 15CA  F6 06 0700 R 02          		test	EVTSET,	2	; Speaker on? 
 15CF  74 15                    		jz	short DONOTX 
 15D1  FA                       		cli 
 15D2  8B 1E 14B3 R             		mov	bx, NOTPTR 
 15D6  89 1E 14B1 R             		mov	CURNOT,	bx 
 15DA  80 26 0700 R FD          		and	EVTSET,	0FDh	; Clear	event bit 
 15DF  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 15E1  24 FD                    		and	al, 0FDh 
 15E3  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 15E5  FB                       		sti 
                                 
 15E6                           DONOTX:					; CODE XREF: DONOTE+Ej	DONOTE:GONO
				TXj 
 15E6  F8                       		clc 
 15E7  5E                       		pop	si 
 15E8  5B                       		pop	bx 
 15E9  1F                       		pop	ds 
                                		assume ds:nothing 
 15EA  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 15EB                           DOPLAY:					; CODE XREF: DONOTE+7j 
 15EB  50                       		push	ax 
 15EC  52                       		push	dx 
 15ED  B8 0013                  		mov	ax, 19 
 15F0  3B C1                    		cmp	ax, cx 
 15F2  72 04                    		jb	short DODIV 
 15F4  33 C0                    		xor	ax, ax 
 15F6  EB 08                    		jmp	short NXNOTE 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-84
                                                            

                                ; ---------------------------------------------
				------------------------------ 
                                 
 15F8                           DODIV:					; CODE XREF: DONOTE+31j 
 15F8  BA 0012                  		mov	dx, 12h 
 15FB  B8 34DC                  		mov	ax, 34DCh 
 15FE  F7 F1                    		div	cx		; Divide 1,193,180 by CX 
                                 
 1600                           NXNOTE:					; CODE XREF: DONOTE+35j 
 1600  50                       		push	ax 
 1601  1E                       		push	ds 
 1602  33 C0                    		xor	ax, ax 
 1604  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 1606  BB 0471                  		mov	bx, 471h	; Ctrl+Break flag 
 1609  88 07                    		mov	[bx], al	; Zero out the flag 
 160B  1F                       		pop	ds 
                                		assume ds:nothing 
 160C  8B 36 14B3 R             		mov	si, ds:NOTPTR 
 1610  56                       		push	si 
 1611  83 C6 04                 		add	si, 4 
 1614  E8 16C6 R                		call	NXTNOT 
                                 
 1617                           WAITLP:					; CODE XREF: DONOTE+67j 
 1617  1E                       		push	ds 
 1618  33 C0                    		xor	ax, ax 
 161A  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 161C  BB 0471                  		mov	bx, 471h	; Ctrl+Break flag 
 161F  3A 07                    		cmp	al, [bx]	; Break	flag set? 
 1621  1F                       		pop	ds 
                                		assume ds:nothing 
 1622  75 06                    		jnz	short WTDONE 
 1624  3B 36 14B1 R             		cmp	si, ds:CURNOT 
 1628  74 ED                    		jz	short WAITLP 
                                 
 162A                           WTDONE:					; CODE XREF: DONOTE+61j 
 162A  5E                       		pop	si 
 162B  58                       		pop	ax 
 162C  BB 142D R                		mov	bx, offset NTARRY 
 162F  89 00                    		mov	[bx+si], ax 
 1631  46                       		inc	si 
 1632  46                       		inc	si 
 1633  58                       		pop	ax 
 1634  89 00                    		mov	[bx+si], ax 
 1636  46                       		inc	si 
 1637  46                       		inc	si 
 1638  E8 16C6 R                		call	NXTNOT 
 163B  89 36 14B3 R             		mov	ds:NOTPTR, si 
 163F  8B F0                    		mov	si, ax 
 1641  FA                       		cli 
 1642  F6 06 0700 R 02          		test	ds:EVTSET, 2	; Speaker on? 
 1647  75 37                    		jnz	short TMISON 
 1649  B8 0001                  		mov	ax, 1 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-85
                                                            

 164C  A3 14B8 R                		mov	ds:word_64AB, ax 
 164F  48                       		dec	ax 
 1650  A2 14B7 R                		mov	ds:byte_64AA, al 
 1653  3A 06 14BB R             		cmp	al, ds:ISRCNT	; Is the timer ISR still go
				ing? 
 1657  75 27                    		jnz	short TMISON	; If yes, no need to install
				 ISR 
 1659  FE 0E 14BB R             		dec	ds:ISRCNT	; ISRCNT was 0,	now -1 
 165D  06                       		push	es 
 165E  1E                       		push	ds 
 165F  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 1661  C4 06 0020               		les	ax, DWORD PTR DS:[20h]	; Install timer	IS
				R (IRQ0, vector 08h) 
 1665  BA 14C0 R                		mov	dx, offset TMRISR 
 1668  89 16 0020               		mov	ds:20h,	dx 
 166C  0E                       		push	cs 
 166D  5A                       		pop	dx 
 166E  89 16 0022               		mov	ds:22h,	dx 
 1672  1F                       		pop	ds 
                                		assume ds:nothing 
 1673  A3 14BC R                		mov	word ptr ds:OLDTMI, ax 
 1676  8C C0                    		mov	ax, es 
 1678  A3 14BE R                		mov	word ptr ds:OLDTMI+2, ax 
 167B  07                       		pop	es 
 167C  B0 B6                    		mov	al, 0B6h 
 167E  E6 43                    		out	43h, al		; Timer	8253-5 (AT: 8254.2). 
                                 
 1680                           TMISON:					; CODE XREF: DONOTE+86j DONOTE+96
				j 
 1680  80 0E 0700 R 02          		or	ds:EVTSET, 2	; Speaker on! 
 1685  FB                       		sti 
 1686  58                       		pop	ax 
 1687  3C 00                    		cmp	al, 0		; Play in the foreground? 
 1689  75 38                    		jnz	short GONOTX 
                                 
 168B                           FGNDLP:					; CODE XREF: DONOTE+E2j DONOTE+F2
				j ... 
 168B  1E                       		push	ds 
 168C  33 C0                    		xor	ax, ax 
 168E  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 1690  BB 0471                  		mov	bx, 471h	; Ctrl+Break flag 
 1693  3A 07                    		cmp	al, [bx]	; Break	flag set? 
 1695  1F                       		pop	ds 
                                		assume ds:nothing 
 1696  75 2B                    		jnz	short GONOTX 
 1698  A1 14B1 R                		mov	ax, ds:CURNOT 
 169B  3B 06 14B3 R             		cmp	ax, ds:NOTPTR 
 169F  74 22                    		jz	short GONOTX 
 16A1  0B F6                    		or	si, si 
 16A3  74 E6                    		jz	short FGNDLP 
 16A5  05 0004                  		add	ax, 4		; Advance pointer 
 16A8  3D 0084                  		cmp	ax, 84h		; Wrapping around? 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Page     1-86
                                                            

 16AB  75 02                    		jnz	short HAVPTR 
 16AD  33 C0                    		xor	ax, ax		; If yes, pointer wraps	to zero 
                                 
 16AF                           HAVPTR:					; CODE XREF: DONOTE+EAj 
 16AF  3B 06 14B3 R             		cmp	ax, ds:NOTPTR 
 16B3  75 D6                    		jnz	short FGNDLP 
 16B5  80 3E 14B7 R 00          		cmp	ds:byte_64AA, 0 
 16BA  75 CF                    		jnz	short FGNDLP 
 16BC  83 3E 14B8 R 06          		cmp	ds:word_64AB, 6 
 16C1  73 C8                    		jnb	short FGNDLP 
                                 
 16C3                           GONOTX:					; CODE XREF: DONOTE+C8j DONOTE+D5
				j ... 
 16C3  E9 15E6 R                		jmp	DONOTX 
                                DONOTE		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 16C6                           NXTNOT		proc near		; CODE XREF: TMRISR+89p DON
				OTE+53p ... 
 16C6  81 FE 0084               		cmp	si, 84h 
 16CA  74 01                    		jz	short WRAP 
 16CC  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 16CD                           WRAP:					; CODE XREF: NXTNOT+4j 
 16CD  BE 0000                  		mov	si, 0 
 16D0  C3                       		ret 
                                NXTNOT		endp 
                                 
 16D1                           CSEG    ENDS 
                                        END 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Symbols-1
                                                             

Segments and Groups:

                N a m e         	Size	Align	Combine Class

CSEG . . . . . . . . . . . . . .  	16D1	PARA	PUBLIC	'CODESG'
DSEG . . . . . . . . . . . . . .  	003A	PARA	PUBLIC	'DATASG'

Symbols:            

                N a m e         	Type	Value	Attr         

BADFNM . . . . . . . . . . . . .  	L NEAR	03EE	CSEG
BADMAP . . . . . . . . . . . . .  	L NEAR	0082	CSEG
BASDAT . . . . . . . . . . . . .  	L NEAR	017C	CSEG
BAUDTB . . . . . . . . . . . . .  	L WORD 	01C5	CSEG
BRKFLG . . . . . . . . . . . . .  	L BYTE 	0702	CSEG
BYTE_5095  . . . . . . . . . . .  	L BYTE 	00BD	CSEG
BYTE_64AA  . . . . . . . . . . .  	L BYTE 	14B7	CSEG
BYTE_64AD  . . . . . . . . . . .  	L BYTE 	14BA	CSEG

CBFSEG . . . . . . . . . . . . .  	L WORD 	0239	CSEG
CBFSIZ . . . . . . . . . . . . .  	L WORD 	023B	CSEG
CBREAK . . . . . . . . . . . . .  	L NEAR	0844	CSEG
CHKESC . . . . . . . . . . . . .  	L NEAR	0865	CSEG
CHKSTP . . . . . . . . . . . . .  	L NEAR	1582	CSEG
CKCOM1 . . . . . . . . . . . . .  	L NEAR	037F	CSEG
CKCOM2 . . . . . . . . . . . . .  	L NEAR	03B9	CSEG
CLREOL . . . . . . . . . . . . .  	N PROC	0B9C	CSEG	Global	Length = 002C
CLREOX . . . . . . . . . . . . .  	L NEAR	0BC3	CSEG
CLRSCN . . . . . . . . . . . . .  	N PROC	0B6F	CSEG	Global	Length = 002D
CM1CTL . . . . . . . . . . . . .  	L BYTE 	01F5	CSEG
CM1ISR . . . . . . . . . . . . .  	L NEAR	0245	CSEG
CM2CTL . . . . . . . . . . . . .  	L BYTE 	0217	CSEG
CM2ISR . . . . . . . . . . . . .  	F PROC	024B	CSEG	Length = 0117
CMPREP . . . . . . . . . . . . .  	N PROC	06E5	CSEG	Length = 001B
COMDLY . . . . . . . . . . . . .  	N PROC	06CF	CSEG	Length = 0016
COMISR . . . . . . . . . . . . .  	L NEAR	024F	CSEG
COMTBL . . . . . . . . . . . . .  	L WORD 	01F1	CSEG
CSAVEA . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSAVEM . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSRATR . . . . . . . . . . . . .  	N PROC	0C79	CSEG	Global	Length = 0034
CSRDSP . . . . . . . . . . . . .  	N PROC	0BC8	CSEG	Global	Length = 0050
CSRERR . . . . . . . . . . . . .  	L NEAR	0CAA	CSEG
CTLBRK . . . . . . . . . . . . .  	F PROC	0725	CSEG	Length = 0007
CURNOT . . . . . . . . . . . . .  	L WORD 	14B1	CSEG

DEBUG  . . . . . . . . . . . . .  	Text  		
DELAY  . . . . . . . . . . . . .  	L NEAR	06D5	CSEG
DOCLRS . . . . . . . . . . . . .  	L NEAR	0B72	CSEG
DODIV  . . . . . . . . . . . . .  	L NEAR	15F8	CSEG
DONOTE . . . . . . . . . . . . .  	N PROC	15C1	CSEG	Global	Length = 0105
DONOTX . . . . . . . . . . . . .  	L NEAR	15E6	CSEG
DOPFLT . . . . . . . . . . . . .  	L NEAR	0159	CSEG
DOPLAY . . . . . . . . . . . . .  	L NEAR	15EB	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Symbols-2
                                                             

DOSCRL . . . . . . . . . . . . .  	N PROC	0AE5	CSEG	Length = 0023
DOSCRX . . . . . . . . . . . . .  	L NEAR	0B04	CSEG
DOVEC  . . . . . . . . . . . . .  	L NEAR	07B6	CSEG
DOWNC  . . . . . . . . . . . . .  	N PROC	0F68	CSEG	Global	Length = 0016
DOWNCX . . . . . . . . . . . . .  	L NEAR	0F76	CSEG

EDTMAP . . . . . . . . . . . . .  	N PROC	0955	CSEG	Global	Length = 0058
EQUIP  . . . . . . . . . . . . .  	L BYTE 	073D	CSEG
EVTSET . . . . . . . . . . . . .  	L BYTE 	0700	CSEG

FETCHC . . . . . . . . . . . . .  	N PROC	0F28	CSEG	Global	Length = 0008
FGNDLP . . . . . . . . . . . . .  	L NEAR	168B	CSEG
FKYADV . . . . . . . . . . . . .  	N PROC	0F1D	CSEG	Global	Length = 0003
FKYFMT . . . . . . . . . . . . .  	N PROC	0F0F	CSEG	Global	Length = 000E
FKYFMX . . . . . . . . . . . . .  	L NEAR	0F1C	CSEG
FNAND  . . . . . . . . . . . . .  	L NEAR	11C2	CSEG
FNINV  . . . . . . . . . . . . .  	L NEAR	11C5	CSEG
FNOR . . . . . . . . . . . . . .  	L NEAR	11BF	CSEG
FNSET  . . . . . . . . . . . . .  	L NEAR	11C7	CSEG
FNXOR  . . . . . . . . . . . . .  	L NEAR	11CA	CSEG

GETFBC . . . . . . . . . . . . .  	N PROC	009F	CSEG	Global	Length = 001E
GETHED . . . . . . . . . . . . .  	N PROC	0059	CSEG	Global	Length = 0006
GONOTX . . . . . . . . . . . . .  	L NEAR	16C3	CSEG
GOSCUR . . . . . . . . . . . . .  	L NEAR	0C08	CSEG
GOSRST . . . . . . . . . . . . .  	L NEAR	0EF9	CSEG
GRPINI . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GRPSIZ . . . . . . . . . . . . .  	N PROC	0103	CSEG	Global	Length = 000D
GSTCUR . . . . . . . . . . . . .  	L NEAR	0CA7	CSEG
GTASPC . . . . . . . . . . . . .  	N PROC	108D	CSEG	Global	Length = 0014
GTASPX . . . . . . . . . . . . .  	L NEAR	10A0	CSEG
GWINI  . . . . . . . . . . . . .  	N PROC	073E	CSEG	Global	Length = 0068
GWINIX . . . . . . . . . . . . .  	L NEAR	07A3	CSEG
GWTERM . . . . . . . . . . . . .  	N PROC	07C3	CSEG	Global	Length = 0063

HAVBSZ . . . . . . . . . . . . .  	L NEAR	0370	CSEG
HAVPTR . . . . . . . . . . . . .  	L NEAR	16AF	CSEG
HEIGHT . . . . . . . . . . . . .  	L NEAR	010C	CSEG

INFMAP . . . . . . . . . . . . .  	N PROC	094C	CSEG	Global	Length = 0009
INICMX . . . . . . . . . . . . .  	L NEAR	0514	CSEG
INICOM . . . . . . . . . . . . .  	N PROC	03F8	CSEG	Global	Length = 0120
INILPT . . . . . . . . . . . . .  	L NEAR	076E	CSEG
INKMAP . . . . . . . . . . . . .  	N PROC	08EA	CSEG	Global	Length = 0062
ISRCNT . . . . . . . . . . . . .  	L BYTE 	14BB	CSEG
ISRDSP . . . . . . . . . . . . .  	L WORD 	023D	CSEG
ISREVT . . . . . . . . . . . . .  	L BYTE 	1306	CSEG
ISRFN0 . . . . . . . . . . . . .  	L NEAR	0328	CSEG
ISRFN1 . . . . . . . . . . . . .  	L NEAR	02EF	CSEG
ISRFN2 . . . . . . . . . . . . .  	L NEAR	026D	CSEG
ISRFN3 . . . . . . . . . . . . .  	L NEAR	031C	CSEG
ISRX . . . . . . . . . . . . . .  	L NEAR	02E6	CSEG

KEYINP . . . . . . . . . . . . .  	N PROC	0826	CSEG	Global	Length = 008B
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Symbols-3
                                                             

KEYINX . . . . . . . . . . . . .  	L NEAR	0870	CSEG
KYBCLR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

LCPY . . . . . . . . . . . . . .  	N PROC	0CAD	CSEG	Global	Length = 0008
LEFTC  . . . . . . . . . . . . .  	N PROC	0F41	CSEG	Global	Length = 0011
LEFTCX . . . . . . . . . . . . .  	L NEAR	0F50	CSEG
LOC_5044 . . . . . . . . . . . .  	L NEAR	006C	CSEG
LOC_5060 . . . . . . . . . . . .  	L NEAR	0088	CSEG
LOC_506E . . . . . . . . . . . .  	L NEAR	0096	CSEG
LOC_5073 . . . . . . . . . . . .  	L NEAR	009B	CSEG
LOC_50CB . . . . . . . . . . . .  	L NEAR	00F3	CSEG
LOC_50CE . . . . . . . . . . . .  	L NEAR	00F6	CSEG
LOC_5187 . . . . . . . . . . . .  	L NEAR	01AF	CSEG
LOC_518F . . . . . . . . . . . .  	L NEAR	01B7	CSEG
LOC_5192 . . . . . . . . . . . .  	L NEAR	01BA	CSEG
LOC_523B . . . . . . . . . . . .  	L NEAR	0260	CSEG
LOC_5257 . . . . . . . . . . . .  	L NEAR	027C	CSEG
LOC_5262 . . . . . . . . . . . .  	L NEAR	0287	CSEG
LOC_5279 . . . . . . . . . . . .  	L NEAR	029E	CSEG
LOC_52DC . . . . . . . . . . . .  	L NEAR	0301	CSEG
LOC_52F2 . . . . . . . . . . . .  	L NEAR	0317	CSEG
LOC_5330 . . . . . . . . . . . .  	L NEAR	0355	CSEG
LOC_5333 . . . . . . . . . . . .  	L NEAR	0358	CSEG
LOC_53CE . . . . . . . . . . . .  	L NEAR	03F3	CSEG
LOC_5418 . . . . . . . . . . . .  	L NEAR	043D	CSEG
LOC_542A . . . . . . . . . . . .  	L NEAR	044F	CSEG
LOC_543D . . . . . . . . . . . .  	L NEAR	0462	CSEG
LOC_5446 . . . . . . . . . . . .  	L NEAR	046B	CSEG
LOC_5457 . . . . . . . . . . . .  	L NEAR	047C	CSEG
LOC_5463 . . . . . . . . . . . .  	L NEAR	0488	CSEG
LOC_546F . . . . . . . . . . . .  	L NEAR	0494	CSEG
LOC_5479 . . . . . . . . . . . .  	L NEAR	049E	CSEG
LOC_54DC . . . . . . . . . . . .  	L NEAR	0501	CSEG
LOC_551B . . . . . . . . . . . .  	L NEAR	0540	CSEG
LOC_552C . . . . . . . . . . . .  	L NEAR	0551	CSEG
LOC_5555 . . . . . . . . . . . .  	L NEAR	057A	CSEG
LOC_557D . . . . . . . . . . . .  	L NEAR	05A2	CSEG
LOC_55A3 . . . . . . . . . . . .  	L NEAR	05C8	CSEG
LOC_55B5 . . . . . . . . . . . .  	L NEAR	05DA	CSEG
LOC_55D4 . . . . . . . . . . . .  	L NEAR	05F9	CSEG
LOC_55DD . . . . . . . . . . . .  	L NEAR	0602	CSEG
LOC_55DF . . . . . . . . . . . .  	L NEAR	0604	CSEG
LOC_55F5 . . . . . . . . . . . .  	L NEAR	061A	CSEG
LOC_55F9 . . . . . . . . . . . .  	L NEAR	061E	CSEG
LOC_5606 . . . . . . . . . . . .  	L NEAR	062B	CSEG
LOC_560D . . . . . . . . . . . .  	L NEAR	0632	CSEG
LOC_563C . . . . . . . . . . . .  	L NEAR	0661	CSEG
LOC_5654 . . . . . . . . . . . .  	L NEAR	0679	CSEG
LOC_5662 . . . . . . . . . . . .  	L NEAR	0687	CSEG
LOC_5673 . . . . . . . . . . . .  	L NEAR	0698	CSEG
LOC_5684 . . . . . . . . . . . .  	L NEAR	06A9	CSEG
LOC_568D . . . . . . . . . . . .  	L NEAR	06B2	CSEG
LOC_5696 . . . . . . . . . . . .  	L NEAR	06BB	CSEG
LOC_569F . . . . . . . . . . . .  	L NEAR	06C4	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Symbols-4
                                                             

LOC_56A6 . . . . . . . . . . . .  	L NEAR	06CB	CSEG
LOC_56EE . . . . . . . . . . . .  	L NEAR	070E	CSEG
LOC_57E7 . . . . . . . . . . . .  	L NEAR	0807	CSEG
LOC_57E9 . . . . . . . . . . . .  	L NEAR	0809	CSEG
LOC_5871 . . . . . . . . . . . .  	L NEAR	0891	CSEG
LOC_5884 . . . . . . . . . . . .  	L NEAR	08A4	CSEG
LOC_58D3 . . . . . . . . . . . .  	L NEAR	08F3	CSEG
LOC_58DA . . . . . . . . . . . .  	L NEAR	08FA	CSEG
LOC_58DC . . . . . . . . . . . .  	L NEAR	08FC	CSEG
LOC_58DE . . . . . . . . . . . .  	L NEAR	08FE	CSEG
LOC_58EA . . . . . . . . . . . .  	L NEAR	090A	CSEG
LOC_58F2 . . . . . . . . . . . .  	L NEAR	0912	CSEG
LOC_590A . . . . . . . . . . . .  	L NEAR	092A	CSEG
LOC_5912 . . . . . . . . . . . .  	L NEAR	0932	CSEG
LOC_5928 . . . . . . . . . . . .  	L NEAR	0948	CSEG
LOC_5933 . . . . . . . . . . . .  	L NEAR	0953	CSEG
LOC_594D . . . . . . . . . . . .  	L NEAR	096D	CSEG
LOC_595D . . . . . . . . . . . .  	L NEAR	097D	CSEG
LOC_5965 . . . . . . . . . . . .  	L NEAR	0985	CSEG
LOC_5983 . . . . . . . . . . . .  	L NEAR	09A3	CSEG
LOC_5989 . . . . . . . . . . . .  	L NEAR	09A9	CSEG
LOC_598B . . . . . . . . . . . .  	L NEAR	09AB	CSEG
LOC_59D8 . . . . . . . . . . . .  	L NEAR	09F8	CSEG
LOC_59DB . . . . . . . . . . . .  	L NEAR	09FB	CSEG
LOC_5A06 . . . . . . . . . . . .  	L NEAR	0A26	CSEG
LOC_5A35 . . . . . . . . . . . .  	L NEAR	0A55	CSEG
LOC_5A4E . . . . . . . . . . . .  	L NEAR	0A6E	CSEG
LOC_5A51 . . . . . . . . . . . .  	L NEAR	0A71	CSEG
LOC_5A57 . . . . . . . . . . . .  	L NEAR	0A77	CSEG
LOC_5A6A . . . . . . . . . . . .  	L NEAR	0A8A	CSEG
LOC_5A6F . . . . . . . . . . . .  	L NEAR	0A8F	CSEG
LOC_5A82 . . . . . . . . . . . .  	L NEAR	0AA2	CSEG
LOC_5A89 . . . . . . . . . . . .  	L NEAR	0AA9	CSEG
LOC_5A9D . . . . . . . . . . . .  	L NEAR	0ABD	CSEG
LOC_5B42 . . . . . . . . . . . .  	L NEAR	0B62	CSEG
LOC_5B45 . . . . . . . . . . . .  	L NEAR	0B65	CSEG
LOC_5BC6 . . . . . . . . . . . .  	L NEAR	0BE6	CSEG
LOC_5BC9 . . . . . . . . . . . .  	L NEAR	0BE9	CSEG
LOC_5BDB . . . . . . . . . . . .  	L NEAR	0BFB	CSEG
LOC_5C14 . . . . . . . . . . . .  	L NEAR	0C34	CSEG
LOC_5C26 . . . . . . . . . . . .  	L NEAR	0C46	CSEG
LOC_5C37 . . . . . . . . . . . .  	L NEAR	0C57	CSEG
LOC_5C46 . . . . . . . . . . . .  	L NEAR	0C66	CSEG
LOC_5C53 . . . . . . . . . . . .  	L NEAR	0C73	CSEG
LOC_5C63 . . . . . . . . . . . .  	L NEAR	0C83	CSEG
LOC_5C6F . . . . . . . . . . . .  	L NEAR	0C8F	CSEG
LOC_5C79 . . . . . . . . . . . .  	L NEAR	0C99	CSEG
LOC_5CD8 . . . . . . . . . . . .  	L NEAR	0CF8	CSEG
LOC_5CDB . . . . . . . . . . . .  	L NEAR	0CFB	CSEG
LOC_5CE6 . . . . . . . . . . . .  	L NEAR	0D06	CSEG
LOC_5CEE . . . . . . . . . . . .  	L NEAR	0D0E	CSEG
LOC_5D1D . . . . . . . . . . . .  	L NEAR	0D3D	CSEG
LOC_5D41 . . . . . . . . . . . .  	L NEAR	0D61	CSEG
LOC_5D45 . . . . . . . . . . . .  	L NEAR	0D65	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Symbols-5
                                                             

LOC_5D59 . . . . . . . . . . . .  	L NEAR	0D79	CSEG
LOC_5D71 . . . . . . . . . . . .  	L NEAR	0D91	CSEG
LOC_5D79 . . . . . . . . . . . .  	L NEAR	0D99	CSEG
LOC_5D80 . . . . . . . . . . . .  	L NEAR	0DA0	CSEG
LOC_5D83 . . . . . . . . . . . .  	L NEAR	0DA3	CSEG
LOC_5D99 . . . . . . . . . . . .  	L NEAR	0DB9	CSEG
LOC_5D9E . . . . . . . . . . . .  	L NEAR	0DBE	CSEG
LOC_5DA3 . . . . . . . . . . . .  	L NEAR	0DC3	CSEG
LOC_5DC0 . . . . . . . . . . . .  	L NEAR	0DE0	CSEG
LOC_5DC3 . . . . . . . . . . . .  	L NEAR	0DE3	CSEG
LOC_5DD6 . . . . . . . . . . . .  	L NEAR	0DF6	CSEG
LOC_5DDF . . . . . . . . . . . .  	L NEAR	0DFF	CSEG
LOC_5DEA . . . . . . . . . . . .  	L NEAR	0E0A	CSEG
LOC_5DF3 . . . . . . . . . . . .  	L NEAR	0E13	CSEG
LOC_5DFC . . . . . . . . . . . .  	L NEAR	0E1C	CSEG
LOC_5E08 . . . . . . . . . . . .  	L NEAR	0E28	CSEG
LOC_5E1E . . . . . . . . . . . .  	L NEAR	0E3E	CSEG
LOC_5E23 . . . . . . . . . . . .  	L NEAR	0E43	CSEG
LOC_5E3B . . . . . . . . . . . .  	L NEAR	0E5B	CSEG
LOC_5E46 . . . . . . . . . . . .  	L NEAR	0E66	CSEG
LOC_5E4C . . . . . . . . . . . .  	L NEAR	0E6C	CSEG
LOC_5E67 . . . . . . . . . . . .  	L NEAR	0E87	CSEG
LOC_5EA1 . . . . . . . . . . . .  	L NEAR	0EC1	CSEG
LOC_5EAF . . . . . . . . . . . .  	L NEAR	0ECF	CSEG
LOC_5F43 . . . . . . . . . . . .  	L NEAR	0F63	CSEG
LOC_5F6E . . . . . . . . . . . .  	L NEAR	0F8E	CSEG
LOC_5F7D . . . . . . . . . . . .  	L NEAR	0F9D	CSEG
LOC_5F82 . . . . . . . . . . . .  	L NEAR	0FA2	CSEG
LOC_5F85 . . . . . . . . . . . .  	L NEAR	0FA5	CSEG
LOC_5FA1 . . . . . . . . . . . .  	L NEAR	0FC1	CSEG
LOC_600A . . . . . . . . . . . .  	L NEAR	102A	CSEG
LOC_600E . . . . . . . . . . . .  	L NEAR	102E	CSEG
LOC_6027 . . . . . . . . . . . .  	L NEAR	1047	CSEG
LOC_6035 . . . . . . . . . . . .  	L NEAR	1055	CSEG
LOC_603C . . . . . . . . . . . .  	L NEAR	105C	CSEG
LOC_6052 . . . . . . . . . . . .  	L NEAR	1072	CSEG
LOC_6056 . . . . . . . . . . . .  	L NEAR	1076	CSEG
LOC_6061 . . . . . . . . . . . .  	L NEAR	1081	CSEG
LOC_606B . . . . . . . . . . . .  	L NEAR	108B	CSEG
LOC_60EC . . . . . . . . . . . .  	L NEAR	110C	CSEG
LOC_60F9 . . . . . . . . . . . .  	L NEAR	1119	CSEG
LOC_60FD . . . . . . . . . . . .  	L NEAR	111D	CSEG
LOC_6103 . . . . . . . . . . . .  	L NEAR	1123	CSEG
LOC_6137 . . . . . . . . . . . .  	L NEAR	1157	CSEG
LOC_6144 . . . . . . . . . . . .  	L NEAR	1164	CSEG
LOC_6148 . . . . . . . . . . . .  	L NEAR	1168	CSEG
LOC_6153 . . . . . . . . . . . .  	L NEAR	1173	CSEG
LOC_6172 . . . . . . . . . . . .  	L NEAR	1192	CSEG
LOC_6183 . . . . . . . . . . . .  	L NEAR	11A3	CSEG
LOC_6199 . . . . . . . . . . . .  	L NEAR	11B9	CSEG
LOC_61C8 . . . . . . . . . . . .  	L NEAR	11E8	CSEG
LOC_61E1 . . . . . . . . . . . .  	L NEAR	1201	CSEG
LOC_61F7 . . . . . . . . . . . .  	L NEAR	1217	CSEG
LOC_61FF . . . . . . . . . . . .  	L NEAR	121F	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Symbols-6
                                                             

LOC_6221 . . . . . . . . . . . .  	L NEAR	1241	CSEG
LOC_6223 . . . . . . . . . . . .  	L NEAR	1243	CSEG
LOC_622C . . . . . . . . . . . .  	L NEAR	124C	CSEG
LOC_6234 . . . . . . . . . . . .  	L NEAR	1254	CSEG
LOC_623E . . . . . . . . . . . .  	L NEAR	125E	CSEG
LOC_624F . . . . . . . . . . . .  	L NEAR	126F	CSEG
LOC_6256 . . . . . . . . . . . .  	L NEAR	1276	CSEG
LOC_626D . . . . . . . . . . . .  	L NEAR	128D	CSEG
LOC_6280 . . . . . . . . . . . .  	L NEAR	12A0	CSEG
LOC_629D . . . . . . . . . . . .  	L NEAR	12BD	CSEG
LOC_62A5 . . . . . . . . . . . .  	L NEAR	12C5	CSEG
LOC_62B7 . . . . . . . . . . . .  	L NEAR	12D7	CSEG
LOC_62B8 . . . . . . . . . . . .  	L NEAR	12D8	CSEG
LOC_62C5 . . . . . . . . . . . .  	L NEAR	12E5	CSEG
LOC_62D1 . . . . . . . . . . . .  	L NEAR	12F1	CSEG
LOC_62D6 . . . . . . . . . . . .  	L NEAR	12F6	CSEG
LOC_62DC . . . . . . . . . . . .  	L NEAR	12FC	CSEG
LOC_639F . . . . . . . . . . . .  	L NEAR	13B5	CSEG
LOC_63A5 . . . . . . . . . . . .  	L NEAR	13BB	CSEG
LOC_64EC . . . . . . . . . . . .  	L NEAR	14F9	CSEG
LOC_64EF . . . . . . . . . . . .  	L NEAR	14FC	CSEG
LOC_6514 . . . . . . . . . . . .  	L NEAR	1521	CSEG
LOC_6518 . . . . . . . . . . . .  	L NEAR	1525	CSEG
LOC_6528 . . . . . . . . . . . .  	L NEAR	1535	CSEG
LOC_6533 . . . . . . . . . . . .  	L NEAR	1540	CSEG
LOC_6564 . . . . . . . . . . . .  	L NEAR	1571	CSEG
LPCOL  . . . . . . . . . . . . .  	L WORD 	1315	CSEG
LPDOWN . . . . . . . . . . . . .  	L WORD 	130D	CSEG
LPENQR . . . . . . . . . . . . .  	N PROC	131B	CSEG	Length = 0056
LPENQX . . . . . . . . . . . . .  	L NEAR	1363	CSEG
LPGX . . . . . . . . . . . . . .  	L WORD 	130F	CSEG
LPGY . . . . . . . . . . . . . .  	L WORD 	1311	CSEG
LPLCOL . . . . . . . . . . . . .  	L WORD 	1319	CSEG
LPLGX  . . . . . . . . . . . . .  	L WORD 	1309	CSEG
LPLGY  . . . . . . . . . . . . .  	L WORD 	130B	CSEG
LPLROW . . . . . . . . . . . . .  	L WORD 	1317	CSEG
LPNOFF . . . . . . . . . . . . .  	L NEAR	138F	CSEG
LPNON  . . . . . . . . . . . . .  	L NEAR	139A	CSEG
LPROW  . . . . . . . . . . . . .  	L WORD 	1313	CSEG
LPWSDN . . . . . . . . . . . . .  	L WORD 	1307	CSEG
LSTRIG . . . . . . . . . . . . .  	L BYTE 	0701	CSEG

MAPSUP . . . . . . . . . . . . .  	N PROC	09AE	CSEG	Global	Length = 0003
MAPXYC . . . . . . . . . . . . .  	N PROC	0FA7	CSEG	Global	Length = 003C
MASKS? . . . . . . . . . . . . .  	L BYTE 	01ED	CSEG
MODES40  . . . . . . . . . . . .  	L BYTE 	0EFF	CSEG
MODES80  . . . . . . . . . . . .  	L BYTE 	0F07	CSEG

NOBRK  . . . . . . . . . . . . .  	L NEAR	0849	CSEG
NONASC . . . . . . . . . . . . .  	L NEAR	0875	CSEG
NOSWIT . . . . . . . . . . . . .  	L NEAR	1369	CSEG
NOTPTR . . . . . . . . . . . . .  	L WORD 	14B3	CSEG
NOTTAB . . . . . . . . . . . . .  	L NEAR	0898	CSEG
NREAD  . . . . . . . . . . . . .  	N PROC	10FC	CSEG	Global	Length = 004B
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Symbols-7
                                                             

NREADX . . . . . . . . . . . . .  	L NEAR	1141	CSEG
NSETCX . . . . . . . . . . . . .  	N PROC	103E	CSEG	Global	Length = 004F
NTARRY . . . . . . . . . . . . .  	L BYTE 	142D	CSEG	Length = 0084
NWRITE . . . . . . . . . . . . .  	N PROC	1147	CSEG	Global	Length = 0078
NXNOTE . . . . . . . . . . . . .  	L NEAR	1600	CSEG
NXTCHR . . . . . . . . . . . . .  	L NEAR	0AF0	CSEG
NXTNOT . . . . . . . . . . . . .  	N PROC	16C6	CSEG	Length = 000B

OEMHED . . . . . . . . . . . . .  	L BYTE 	0017	CSEG
OFF_5101 . . . . . . . . . . . .  	L WORD 	0129	CSEG
OLDTMI . . . . . . . . . . . . .  	L DWORD	14BC	CSEG
ONEKEY . . . . . . . . . . . . .  	L NEAR	086E	CSEG

PEKFLT . . . . . . . . . . . . .  	N PROC	0141	CSEG	Global	Length = 000E
PEKPOK . . . . . . . . . . . . .  	L BYTE 	0110	CSEG
PFLTX  . . . . . . . . . . . . .  	L NEAR	01BE	CSEG
PGDISP . . . . . . . . . . . . .  	L WORD 	10BC	CSEG
PGINIT . . . . . . . . . . . . .  	N PROC	10C6	CSEG	Global	Length = 0036
PGINIX . . . . . . . . . . . . .  	L NEAR	10FB	CSEG
PIXSIZ . . . . . . . . . . . . .  	N PROC	10A1	CSEG	Global	Length = 0004
PNTINI . . . . . . . . . . . . .  	N PROC	11CD	CSEG	Global	Length = 000B
PNTINX . . . . . . . . . . . . .  	L NEAR	11D3	CSEG
POKFLT . . . . . . . . . . . . .  	N PROC	014F	CSEG	Global	Length = 0076
POLEVX . . . . . . . . . . . . .  	L NEAR	142C	CSEG
POLLEV . . . . . . . . . . . . .  	N PROC	140E	CSEG	Global	Length = 001F
PRTMAP . . . . . . . . . . . . .  	N PROC	005F	CSEG	Global	Length = 0040

RDCLOP . . . . . . . . . . . . .  	L NEAR	1005	CSEG
RDPEN  . . . . . . . . . . . . .  	N PROC	1371	CSEG	Global	Length = 0038
RDPENX . . . . . . . . . . . . .  	L NEAR	138C	CSEG
RDSTIK . . . . . . . . . . . . .  	N PROC	13E5	CSEG	Global	Length = 0029
RDSTKX . . . . . . . . . . . . .  	L NEAR	140A	CSEG
RDSTLP . . . . . . . . . . . . .  	L NEAR	1403	CSEG
RDTRGX . . . . . . . . . . . . .  	L NEAR	13E2	CSEG
RDTRIG . . . . . . . . . . . . .  	N PROC	13A9	CSEG	Global	Length = 003C
READC  . . . . . . . . . . . . .  	N PROC	0FEC	CSEG	Global	Length = 0020
RECCOM . . . . . . . . . . . . .  	N PROC	0518	CSEG	Global	Length = 0040
RGHTCX . . . . . . . . . . . . .  	L NEAR	0F3F	CSEG
RIGHTC . . . . . . . . . . . . .  	N PROC	0F30	CSEG	Global	Length = 0011

SCALXY . . . . . . . . . . . . .  	N PROC	0F7E	CSEG	Global	Length = 0029
SCANL  . . . . . . . . . . . . .  	N PROC	1292	CSEG	Global	Length = 0074
SCANR  . . . . . . . . . . . . .  	N PROC	11D8	CSEG	Global	Length = 00AA
SCBFX  . . . . . . . . . . . . .  	L NEAR	03DF	CSEG
SCNCLR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCNERR . . . . . . . . . . . . .  	L NEAR	0EFC	CSEG
SCNOK  . . . . . . . . . . . . .  	L NEAR	0EF8	CSEG
SCNRST . . . . . . . . . . . . .  	N PROC	072C	CSEG	Global	Length = 0011
SCNSWI . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCNXLT . . . . . . . . . . . . .  	L BYTE 	08B1	CSEG
SCRATR . . . . . . . . . . . . .  	N PROC	0CB5	CSEG	Global	Length = 0023
SCRINP . . . . . . . . . . . . .  	N PROC	0A15	CSEG	Global	Length = 0017
SCROL  . . . . . . . . . . . . .  	L NEAR	0B90	CSEG
SCROLL . . . . . . . . . . . . .  	N PROC	0A2D	CSEG	Global	Length = 00A1
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Symbols-8
                                                             

SCROUT . . . . . . . . . . . . .  	N PROC	09B1	CSEG	Global	Length = 0029
SCRRDC . . . . . . . . . . . . .  	N PROC	0B08	CSEG	Length = 000F
SCRRST . . . . . . . . . . . . .  	L NEAR	0A58	CSEG
SCRSAV . . . . . . . . . . . . .  	N PROC	0B31	CSEG	Length = 003E
SCRSTT . . . . . . . . . . . . .  	N PROC	0CD8	CSEG	Global	Length = 00D2
SCRSV2 . . . . . . . . . . . . .  	N PROC	09DA	CSEG	Length = 003B
SCRWRC . . . . . . . . . . . . .  	N PROC	0B17	CSEG	Length = 001A
SEGINI . . . . . . . . . . . . .  	N PROC	0000	CSEG	Global	Length = 0017
SETATR . . . . . . . . . . . . .  	N PROC	0FE3	CSEG	Global	Length = 0009
SETC . . . . . . . . . . . . . .  	N PROC	100C	CSEG	Global	Length = 000C
SETCBF . . . . . . . . . . . . .  	N PROC	0362	CSEG	Global	Length = 008C
SETCLR . . . . . . . . . . . . .  	N PROC	0DC9	CSEG	Global	Length = 00B1
SETCSR . . . . . . . . . . . . .  	L NEAR	07E5	CSEG
SETCUR . . . . . . . . . . . . .  	L NEAR	0BDF	CSEG
SETERR . . . . . . . . . . . . .  	L NEAR	0E77	CSEG
SETFBC . . . . . . . . . . . . .  	N PROC	00BE	CSEG	Global	Length = 003B
SETPTR . . . . . . . . . . . . .  	N PROC	1018	CSEG	Length = 0026
SETVPG . . . . . . . . . . . . .  	N PROC	0ACE	CSEG	Length = 0017
SETVPX . . . . . . . . . . . . .  	L NEAR	0AE3	CSEG
SNDCMX . . . . . . . . . . . . .  	L NEAR	05A8	CSEG
SNDCOM . . . . . . . . . . . . .  	N PROC	0558	CSEG	Global	Length = 0058
SNDLOP . . . . . . . . . . . . .  	L NEAR	056D	CSEG
SNDLPT . . . . . . . . . . . . .  	N PROC	05DF	CSEG	Global	Length = 0028
SNERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SPCTAB . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STACOM . . . . . . . . . . . . .  	N PROC	05B0	CSEG	Global	Length = 002F
STATRX . . . . . . . . . . . . .  	L NEAR	0FEA	CSEG
STOREC . . . . . . . . . . . . .  	N PROC	0F20	CSEG	Global	Length = 0008
SUB_5643 . . . . . . . . . . . .  	N PROC	0668	CSEG	Length = 0022
SUB_5665 . . . . . . . . . . . .  	N PROC	068A	CSEG	Length = 0045
SUB_5BF8 . . . . . . . . . . . .  	N PROC	0C18	CSEG	Length = 0061
SUB_5D8A . . . . . . . . . . . .  	N PROC	0DAA	CSEG	Length = 001F
SUB_5E5A . . . . . . . . . . . .  	N PROC	0E7A	CSEG	Length = 0011
SUB_6262 . . . . . . . . . . . .  	N PROC	1282	CSEG	Length = 0010
SWIDTH . . . . . . . . . . . . .  	N PROC	0E8B	CSEG	Global	Length = 0071
SWPVEC . . . . . . . . . . . . .  	N PROC	07A6	CSEG	Length = 001D

TDOWNC . . . . . . . . . . . . .  	N PROC	10B1	CSEG	Global	Length = 000B
TIMISR . . . . . . . . . . . . .  	F PROC	0703	CSEG	Length = 0022
TMISON . . . . . . . . . . . . .  	L NEAR	1680	CSEG
TMRCHN . . . . . . . . . . . . .  	L NEAR	15AD	CSEG
TMRIS1 . . . . . . . . . . . . .  	L NEAR	14D4	CSEG
TMRISR . . . . . . . . . . . . .  	F PROC	14C0	CSEG	Length = 0101
TMRISX . . . . . . . . . . . . .  	L NEAR	15B7	CSEG
TMRRST . . . . . . . . . . . . .  	L NEAR	15A8	CSEG
TRMCOM . . . . . . . . . . . . .  	N PROC	0607	CSEG	Global	Length = 0061
TUPC . . . . . . . . . . . . . .  	N PROC	10A5	CSEG	Global	Length = 000C
TUPCX  . . . . . . . . . . . . .  	L NEAR	10AF	CSEG
TWOKEY . . . . . . . . . . . . .  	L NEAR	0893	CSEG
TXTATR . . . . . . . . . . . . .  	L NEAR	00B6	CSEG

UPC  . . . . . . . . . . . . . .  	L NEAR	0F52	CSEG	Global

VAR_630  . . . . . . . . . . . .  	L BYTE 	0000	DSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 11:09:15

                                                            Symbols-9
                                                             

VAR_631  . . . . . . . . . . . .  	L WORD 	0001	DSEG
VAR_633  . . . . . . . . . . . .  	L WORD 	0003	DSEG
VAR_637  . . . . . . . . . . . .  	L WORD 	0007	DSEG
VAR_639  . . . . . . . . . . . .  	L BYTE 	0009	DSEG
VAR_63A  . . . . . . . . . . . .  	L BYTE 	000A	DSEG
VAR_63B  . . . . . . . . . . . .  	L BYTE 	000B	DSEG
VAR_63C  . . . . . . . . . . . .  	L BYTE 	000C	DSEG
VAR_63D  . . . . . . . . . . . .  	L BYTE 	000D	DSEG
VAR_63E  . . . . . . . . . . . .  	L BYTE 	000E	DSEG
VAR_63F  . . . . . . . . . . . .  	L BYTE 	000F	DSEG
VAR_640  . . . . . . . . . . . .  	L BYTE 	0010	DSEG
VAR_641  . . . . . . . . . . . .  	L BYTE 	0011	DSEG
VAR_642  . . . . . . . . . . . .  	L BYTE 	0012	DSEG
VAR_643  . . . . . . . . . . . .  	L WORD 	0013	DSEG
VAR_645  . . . . . . . . . . . .  	L BYTE 	0015	DSEG
VAR_646  . . . . . . . . . . . .  	L BYTE 	0016	DSEG
VAR_647  . . . . . . . . . . . .  	L WORD 	0017	DSEG
VAR_649  . . . . . . . . . . . .  	L WORD 	0019	DSEG
VAR_64B  . . . . . . . . . . . .  	L BYTE 	001B	DSEG
VAR_64C  . . . . . . . . . . . .  	L BYTE 	001C	DSEG
VAR_64D  . . . . . . . . . . . .  	L BYTE 	001D	DSEG
VAR_64E  . . . . . . . . . . . .  	L WORD 	001E	DSEG
VAR_650  . . . . . . . . . . . .  	L BYTE 	0020	DSEG
VAR_652  . . . . . . . . . . . .  	L BYTE 	0022	DSEG
VAR_655  . . . . . . . . . . . .  	L BYTE 	0025	DSEG
VAR_660  . . . . . . . . . . . .  	L BYTE 	0030	DSEG
VAR_661  . . . . . . . . . . . .  	L WORD 	0031	DSEG
VAR_663  . . . . . . . . . . . .  	L WORD 	0033	DSEG
VAR_665  . . . . . . . . . . . .  	L BYTE 	0035	DSEG
VAR_666  . . . . . . . . . . . .  	L BYTE 	0036	DSEG
VAR_667  . . . . . . . . . . . .  	L WORD 	0037	DSEG
VAR_669  . . . . . . . . . . . .  	L BYTE 	0039	DSEG
VIDPGE . . . . . . . . . . . . .  	L NEAR	0767	CSEG

WAITLP . . . . . . . . . . . . .  	L NEAR	1617	CSEG
WIDE40 . . . . . . . . . . . . .  	L NEAR	0EAC	CSEG
WORD_50E9  . . . . . . . . . . .  	L WORD 	0111	CSEG
WORD_64AB  . . . . . . . . . . .  	L WORD 	14B8	CSEG
WRAP . . . . . . . . . . . . . .  	L NEAR	16CD	CSEG
WTDONE . . . . . . . . . . . . .  	L NEAR	162A	CSEG


   4229 Source  Lines
   4229 Total   Lines
    467 Symbols

  34834 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
